import{_ as h,C as r,c as p,o,az as t,j as i,G as a,a as l,w as n}from"./chunks/framework.Dl3dp2vx.js";const De=JSON.parse('{"title":"Full GeometryOps API documentation","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),k={name:"api.md"},d={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},W={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},Z={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""},Y={class:"jldocstring custom-block",open:""},$={class:"jldocstring custom-block",open:""},ss={class:"jldocstring custom-block",open:""},is={class:"jldocstring custom-block",open:""},es={class:"jldocstring custom-block",open:""},as={class:"jldocstring custom-block",open:""},ts={class:"jldocstring custom-block",open:""},ns={class:"jldocstring custom-block",open:""},ls={class:"jldocstring custom-block",open:""},ps={class:"jldocstring custom-block",open:""},os={class:"jldocstring custom-block",open:""},hs={class:"jldocstring custom-block",open:""},rs={class:"jldocstring custom-block",open:""},ks={class:"jldocstring custom-block",open:""},ds={class:"jldocstring custom-block",open:""},gs={class:"jldocstring custom-block",open:""},ys={class:"jldocstring custom-block",open:""},cs={class:"jldocstring custom-block",open:""},Es={class:"jldocstring custom-block",open:""},us={class:"jldocstring custom-block",open:""},ms={class:"jldocstring custom-block",open:""},Ts={class:"jldocstring custom-block",open:""},Cs={class:"jldocstring custom-block",open:""},fs={class:"jldocstring custom-block",open:""},Fs={class:"jldocstring custom-block",open:""},bs={class:"jldocstring custom-block",open:""},As={class:"jldocstring custom-block",open:""},_s={class:"jldocstring custom-block",open:""},Gs={class:"jldocstring custom-block",open:""},js={class:"jldocstring custom-block",open:""},vs={class:"jldocstring custom-block",open:""},Os={class:"jldocstring custom-block",open:""},Bs={class:"jldocstring custom-block",open:""},Ds={class:"jldocstring custom-block",open:""},xs={class:"jldocstring custom-block",open:""},Is={class:"jldocstring custom-block",open:""},Ss={class:"jldocstring custom-block",open:""},ws={class:"jldocstring custom-block",open:""},Ps={class:"jldocstring custom-block",open:""},Qs={class:"jldocstring custom-block",open:""},Ls={class:"jldocstring custom-block",open:""},Vs={class:"jldocstring custom-block",open:""},Rs={class:"jldocstring custom-block",open:""},Ms={class:"jldocstring custom-block",open:""},Ns={class:"jldocstring custom-block",open:""},qs={class:"jldocstring custom-block",open:""},Js={class:"jldocstring custom-block",open:""},Hs={class:"jldocstring custom-block",open:""},Us={class:"jldocstring custom-block",open:""},Ws={class:"jldocstring custom-block",open:""},zs={class:"jldocstring custom-block",open:""},Zs={class:"jldocstring custom-block",open:""},Ks={class:"jldocstring custom-block",open:""},Xs={class:"jldocstring custom-block",open:""},Ys={class:"jldocstring custom-block",open:""},$s={class:"jldocstring custom-block",open:""},si={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},ii={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-2.827ex"},xmlns:"http://www.w3.org/2000/svg",width:"33.539ex",height:"6.785ex",role:"img",focusable:"false",viewBox:"0 -1749.5 14824.1 2999","aria-hidden":"true"},ei={class:"jldocstring custom-block",open:""},ai={class:"jldocstring custom-block",open:""},ti={class:"jldocstring custom-block",open:""},ni={class:"jldocstring custom-block",open:""},li={class:"jldocstring custom-block",open:""},pi={class:"jldocstring custom-block",open:""},oi={class:"jldocstring custom-block",open:""},hi={class:"jldocstring custom-block",open:""},ri={class:"jldocstring custom-block",open:""},ki={class:"jldocstring custom-block",open:""},di={class:"jldocstring custom-block",open:""},gi={class:"jldocstring custom-block",open:""},yi={class:"jldocstring custom-block",open:""},ci={class:"jldocstring custom-block",open:""},Ei={class:"jldocstring custom-block",open:""},ui={class:"jldocstring custom-block",open:""},mi={class:"jldocstring custom-block",open:""},Ti={class:"jldocstring custom-block",open:""},Ci={class:"jldocstring custom-block",open:""},fi={class:"jldocstring custom-block",open:""},Fi={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},bi={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-2.059ex"},xmlns:"http://www.w3.org/2000/svg",width:"27.746ex",height:"5.362ex",role:"img",focusable:"false",viewBox:"0 -1460 12263.9 2370","aria-hidden":"true"},Ai={class:"jldocstring custom-block",open:""},_i={class:"jldocstring custom-block",open:""},Gi={class:"jldocstring custom-block",open:""},ji={class:"jldocstring custom-block",open:""},vi={class:"jldocstring custom-block",open:""},Oi={class:"jldocstring custom-block",open:""},Bi={class:"jldocstring custom-block",open:""},Di={class:"jldocstring custom-block",open:""},xi={class:"jldocstring custom-block",open:""},Ii={class:"jldocstring custom-block",open:""},Si={class:"jldocstring custom-block",open:""},wi={class:"jldocstring custom-block",open:""},Pi={class:"jldocstring custom-block",open:""},Qi={class:"jldocstring custom-block",open:""},Li={class:"jldocstring custom-block",open:""},Vi={class:"jldocstring custom-block",open:""},Ri={class:"jldocstring custom-block",open:""},Mi={class:"jldocstring custom-block",open:""},Ni={class:"jldocstring custom-block",open:""},qi={class:"jldocstring custom-block",open:""},Ji={class:"jldocstring custom-block",open:""},Hi={class:"jldocstring custom-block",open:""},Ui={class:"jldocstring custom-block",open:""},Wi={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},zi={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.023ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",role:"img",focusable:"false",viewBox:"0 -441 529 451","aria-hidden":"true"},Zi={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Ki={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.507ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 1550 1000","aria-hidden":"true"},Xi={class:"jldocstring custom-block",open:""},Yi={class:"jldocstring custom-block",open:""},$i={class:"jldocstring custom-block",open:""},se={class:"jldocstring custom-block",open:""},ie={class:"jldocstring custom-block",open:""},ee={class:"jldocstring custom-block",open:""},ae={class:"jldocstring custom-block",open:""},te={class:"jldocstring custom-block",open:""},ne={class:"tip custom-block"},le={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},pe={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.442ex",height:"2.059ex",role:"img",focusable:"false",viewBox:"0 -705 2405.3 910","aria-hidden":"true"},oe={class:"jldocstring custom-block",open:""},he={class:"jldocstring custom-block",open:""},re={class:"jldocstring custom-block",open:""},ke={class:"jldocstring custom-block",open:""},de={class:"jldocstring custom-block",open:""},ge={class:"jldocstring custom-block",open:""},ye={class:"jldocstring custom-block",open:""},ce={class:"jldocstring custom-block",open:""},Ee={class:"jldocstring custom-block",open:""},ue={class:"jldocstring custom-block",open:""},me={class:"jldocstring custom-block",open:""},Te={class:"jldocstring custom-block",open:""},Ce={class:"jldocstring custom-block",open:""},fe={class:"jldocstring custom-block",open:""},Fe={class:"jldocstring custom-block",open:""},be={class:"jldocstring custom-block",open:""};function Ae(_e,s,Ge,je,ve,Oe){const e=r("Badge");return o(),p("div",null,[s[742]||(s[742]=t('<h1 id="Full-GeometryOps-API-documentation" tabindex="-1">Full GeometryOps API documentation <a class="header-anchor" href="#Full-GeometryOps-API-documentation" aria-label="Permalink to &quot;Full GeometryOps API documentation {#Full-GeometryOps-API-documentation}&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This page is still very much WIP!</p></div><p>Documentation for <a href="https://github.com/JuliaGeo/GeometryOps.jl" target="_blank" rel="noreferrer">GeometryOps</a>&#39;s full API (only for reference!).</p><ul><li><a href="#GeometryOps.GEOMETRYOPS_NO_OPTIMIZE_EDGEINTERSECT_NUMVERTS"><code>GeometryOps.GEOMETRYOPS_NO_OPTIMIZE_EDGEINTERSECT_NUMVERTS</code></a></li><li><a href="#GeometryOpsCore.WGS84_EARTH_INV_FLATTENING"><code>GeometryOpsCore.WGS84_EARTH_INV_FLATTENING</code></a></li><li><a href="#GeometryOpsCore.WGS84_EARTH_MEAN_RADIUS"><code>GeometryOpsCore.WGS84_EARTH_MEAN_RADIUS</code></a></li><li><a href="#GeometryOpsCore.WGS84_EARTH_SEMI_MAJOR_RADIUS"><code>GeometryOpsCore.WGS84_EARTH_SEMI_MAJOR_RADIUS</code></a></li><li><a href="#GeometryOps.AbstractBarycentricCoordinateMethod"><code>GeometryOps.AbstractBarycentricCoordinateMethod</code></a></li><li><a href="#GeometryOps.AutoAccelerator"><code>GeometryOps.AutoAccelerator</code></a></li><li><a href="#GeometryOps.CLibraryPlanarAlgorithm"><code>GeometryOps.CLibraryPlanarAlgorithm</code></a></li><li><a href="#GeometryOps.ClosedRing"><code>GeometryOps.ClosedRing</code></a></li><li><a href="#GeometryOps.DiffIntersectingPolygons"><code>GeometryOps.DiffIntersectingPolygons</code></a></li><li><a href="#GeometryOps.DouglasPeucker"><code>GeometryOps.DouglasPeucker</code></a></li><li><a href="#GeometryOps.FosterHormannClipping"><code>GeometryOps.FosterHormannClipping</code></a></li><li><a href="#GeometryOps.GEOS"><code>GeometryOps.GEOS</code></a></li><li><a href="#GeometryOps.GeodesicSegments"><code>GeometryOps.GeodesicSegments</code></a></li><li><a href="#GeometryOps.GeometryCorrection"><code>GeometryOps.GeometryCorrection</code></a></li><li><a href="#GeometryOps.IntersectionAccelerator"><code>GeometryOps.IntersectionAccelerator</code></a></li><li><a href="#GeometryOps.LineOrientation"><code>GeometryOps.LineOrientation</code></a></li><li><a href="#GeometryOps.LinearSegments"><code>GeometryOps.LinearSegments</code></a></li><li><a href="#GeometryOps.MeanValue"><code>GeometryOps.MeanValue</code></a></li><li><a href="#GeometryOps.MonotoneChainMethod"><code>GeometryOps.MonotoneChainMethod</code></a></li><li><a href="#GeometryOps.PROJ"><code>GeometryOps.PROJ</code></a></li><li><a href="#GeometryOps.PointOrientation"><code>GeometryOps.PointOrientation</code></a></li><li><a href="#GeometryOps.RadialDistance"><code>GeometryOps.RadialDistance</code></a></li><li><a href="#GeometryOps.SimplifyAlg"><code>GeometryOps.SimplifyAlg</code></a></li><li><a href="#GeometryOps.TG"><code>GeometryOps.TG</code></a></li><li><a href="#GeometryOps.TracingError"><code>GeometryOps.TracingError</code></a></li><li><a href="#GeometryOps.UnionIntersectingPolygons"><code>GeometryOps.UnionIntersectingPolygons</code></a></li><li><a href="#GeometryOps.VisvalingamWhyatt"><code>GeometryOps.VisvalingamWhyatt</code></a></li><li><a href="#GeometryOps._VecTypes"><code>GeometryOps._VecTypes</code></a></li><li><a href="#GeometryOpsCore.Algorithm"><code>GeometryOpsCore.Algorithm</code></a></li><li><a href="#GeometryOpsCore.Applicator"><code>GeometryOpsCore.Applicator</code></a></li><li><a href="#GeometryOpsCore.ApplyToArray"><code>GeometryOpsCore.ApplyToArray</code></a></li><li><a href="#GeometryOpsCore.ApplyToFeatures"><code>GeometryOpsCore.ApplyToFeatures</code></a></li><li><a href="#GeometryOpsCore.ApplyToGeom"><code>GeometryOpsCore.ApplyToGeom</code></a></li><li><a href="#GeometryOpsCore.AutoAlgorithm"><code>GeometryOpsCore.AutoAlgorithm</code></a></li><li><a href="#GeometryOpsCore.AutoManifold"><code>GeometryOpsCore.AutoManifold</code></a></li><li><a href="#GeometryOpsCore.BoolsAsTypes"><code>GeometryOpsCore.BoolsAsTypes</code></a></li><li><a href="#GeometryOpsCore.False"><code>GeometryOpsCore.False</code></a></li><li><a href="#GeometryOpsCore.Geodesic"><code>GeometryOpsCore.Geodesic</code></a></li><li><a href="#GeometryOpsCore.Manifold"><code>GeometryOpsCore.Manifold</code></a></li><li><a href="#GeometryOpsCore.ManifoldIndependentAlgorithm"><code>GeometryOpsCore.ManifoldIndependentAlgorithm</code></a></li><li><a href="#GeometryOpsCore.MissingKeywordInAlgorithmException"><code>GeometryOpsCore.MissingKeywordInAlgorithmException</code></a></li><li><a href="#GeometryOpsCore.NoAlgorithm"><code>GeometryOpsCore.NoAlgorithm</code></a></li><li><a href="#GeometryOpsCore.Operation"><code>GeometryOpsCore.Operation</code></a></li><li><a href="#GeometryOpsCore.Planar"><code>GeometryOpsCore.Planar</code></a></li><li><a href="#GeometryOpsCore.SingleManifoldAlgorithm"><code>GeometryOpsCore.SingleManifoldAlgorithm</code></a></li><li><a href="#GeometryOpsCore.Spherical"><code>GeometryOpsCore.Spherical</code></a></li><li><a href="#GeometryOpsCore.TaskFunctors"><code>GeometryOpsCore.TaskFunctors</code></a></li><li><a href="#GeometryOpsCore.TraitTarget"><code>GeometryOpsCore.TraitTarget</code></a></li><li><a href="#GeometryOpsCore.True"><code>GeometryOpsCore.True</code></a></li><li><a href="#GeometryOpsCore.WithTrait"><code>GeometryOpsCore.WithTrait</code></a></li><li><a href="#GeometryOpsCore.WrongManifoldException"><code>GeometryOpsCore.WrongManifoldException</code></a></li><li><a href="#GeometryOps._det-Union{Tuple{T2}, Tuple{T1}, Tuple{Union{Tuple{T1, T1}, StaticArraysCore.StaticArray{Tuple{2}, T1, 1}}, Union{Tuple{T2, T2}, StaticArraysCore.StaticArray{Tuple{2}, T2, 1}}}} where {T1&lt;:Real, T2&lt;:Real}"><code>GeometryOps._det</code></a></li><li><a href="#GeometryOps._equals_curves-NTuple{4, Any}"><code>GeometryOps._equals_curves</code></a></li><li><a href="#GeometryOps.angles"><code>GeometryOps.angles</code></a></li><li><a href="#GeometryOps.angles-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.angles</code></a></li><li><a href="#GeometryOps.area"><code>GeometryOps.area</code></a></li><li><a href="#GeometryOps.area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.area</code></a></li><li><a href="#GeometryOps.centroid-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"><code>GeometryOps.centroid</code></a></li><li><a href="#GeometryOps.centroid"><code>GeometryOps.centroid</code></a></li><li><a href="#GeometryOps.centroid_and_area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"><code>GeometryOps.centroid_and_area</code></a></li><li><a href="#GeometryOps.centroid_and_length-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"><code>GeometryOps.centroid_and_length</code></a></li><li><a href="#GeometryOps.contains-Tuple{Any}"><code>GeometryOps.contains</code></a></li><li><a href="#GeometryOps.contains-Tuple{Any, Any}"><code>GeometryOps.contains</code></a></li><li><a href="#GeometryOps.contains"><code>GeometryOps.contains</code></a></li><li><a href="#GeometryOps.convex_hull"><code>GeometryOps.convex_hull</code></a></li><li><a href="#GeometryOps.coverage-Union{Tuple{T}, NTuple{5, Any}, Tuple{Any, Any, Any, Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.coverage</code></a></li><li><a href="#GeometryOps.coveredby-Tuple{Any}"><code>GeometryOps.coveredby</code></a></li><li><a href="#GeometryOps.coveredby"><code>GeometryOps.coveredby</code></a></li><li><a href="#GeometryOps.coveredby-Tuple{Any, Any}"><code>GeometryOps.coveredby</code></a></li><li><a href="#GeometryOps.covers-Tuple{Any}"><code>GeometryOps.covers</code></a></li><li><a href="#GeometryOps.covers"><code>GeometryOps.covers</code></a></li><li><a href="#GeometryOps.covers-Tuple{Any, Any}"><code>GeometryOps.covers</code></a></li><li><a href="#GeometryOps.crosses-Tuple{Any, Any}"><code>GeometryOps.crosses</code></a></li><li><a href="#GeometryOps.crosses"><code>GeometryOps.crosses</code></a></li><li><a href="#GeometryOps.crosses-Tuple{Any}"><code>GeometryOps.crosses</code></a></li><li><a href="#GeometryOps.cut-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.cut</code></a></li><li><a href="#GeometryOps.difference-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.difference</code></a></li><li><a href="#GeometryOps.disjoint"><code>GeometryOps.disjoint</code></a></li><li><a href="#GeometryOps.disjoint-Tuple{Any, Any}"><code>GeometryOps.disjoint</code></a></li><li><a href="#GeometryOps.disjoint-Tuple{Any}"><code>GeometryOps.disjoint</code></a></li><li><a href="#GeometryOps.distance"><code>GeometryOps.distance</code></a></li><li><a href="#GeometryOps.distance-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.distance</code></a></li><li><a href="#GeometryOps.eachedge-Tuple{Any}"><code>GeometryOps.eachedge</code></a></li><li><a href="#GeometryOps.edge_extents-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"><code>GeometryOps.edge_extents</code></a></li><li><a href="#GeometryOps.embed_extent"><code>GeometryOps.embed_extent</code></a></li><li><a href="#GeometryOps.embed_extent-Tuple{Any}"><code>GeometryOps.embed_extent</code></a></li><li><a href="#GeometryOps.enforce-Tuple{GeometryOps.CLibraryPlanarAlgorithm, Symbol, Any}"><code>GeometryOps.enforce</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.PointTrait, Any, GeoInterface.MultiPointTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.PolygonTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.PolygonTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any, GeoInterface.LinearRingTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Union{Tuple{T}, Tuple{T, Any, T, Any}} where T"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.LinearRingTrait, Any, GeoInterface.LinearRingTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.PointTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.PointTrait, Any, GeoInterface.PointTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.LinearRingTrait, Any, Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.MultiPointTrait, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-NTuple{4, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{Any, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.equals-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any, Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any}"><code>GeometryOps.equals</code></a></li><li><a href="#GeometryOps.extent_to_polygon-Tuple{Extents.Extent{(:X, :Y)}}"><code>GeometryOps.extent_to_polygon</code></a></li><li><a href="#GeometryOps.flip-Tuple{Any}"><code>GeometryOps.flip</code></a></li><li><a href="#GeometryOps.forcexy-Tuple{Any}"><code>GeometryOps.forcexy</code></a></li><li><a href="#GeometryOps.forcexyz"><code>GeometryOps.forcexyz</code></a></li><li><a href="#GeometryOps.foreach_pair_of_maybe_intersecting_edges_in_order-Union{Tuple{M}, Tuple{T}, Tuple{FI}, Tuple{FAAfter}, Tuple{FA}, Tuple{M, GeometryOps.AutoAccelerator, FA, FAAfter, FI, Any, Any}, Tuple{M, GeometryOps.AutoAccelerator, FA, FAAfter, FI, Any, Any, Type{T}}} where {FA, FAAfter, FI, T, M&lt;:Manifold}"><code>GeometryOps.foreach_pair_of_maybe_intersecting_edges_in_order</code></a></li><li><a href="#GeometryOps.intersection-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.intersection</code></a></li><li><a href="#GeometryOps.intersection_points-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.intersection_points</code></a></li><li><a href="#GeometryOps.intersects-Tuple{Any, Any}"><code>GeometryOps.intersects</code></a></li><li><a href="#GeometryOps.intersects-Tuple{Any}"><code>GeometryOps.intersects</code></a></li><li><a href="#GeometryOps.intersects"><code>GeometryOps.intersects</code></a></li><li><a href="#GeometryOps.isclockwise-Tuple{Any}"><code>GeometryOps.isclockwise</code></a></li><li><a href="#GeometryOps.isconcave-Tuple{Any}"><code>GeometryOps.isconcave</code></a></li><li><a href="#GeometryOps.lazy_edge_extents-Tuple{Any}"><code>GeometryOps.lazy_edge_extents</code></a></li><li><a href="#GeometryOps.lazy_edgelist-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"><code>GeometryOps.lazy_edgelist</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{GeoInterface.AbstractTrait, Any, GeoInterface.AbstractTrait, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{Any, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.MultiPointTrait, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.PolygonTrait, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.Wrappers.LinearRing}, Any, Union{GeoInterface.LineStringTrait, GeoInterface.Wrappers.LinearRing}, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.PolygonTrait, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.overlaps-Tuple{GeoInterface.LineTrait, Any, GeoInterface.LineTrait, Any}"><code>GeometryOps.overlaps</code></a></li><li><a href="#GeometryOps.polygon_to_line-Tuple{Any}"><code>GeometryOps.polygon_to_line</code></a></li><li><a href="#GeometryOps.polygonize-Tuple{AbstractMatrix{Bool}}"><code>GeometryOps.polygonize</code></a></li><li><a href="#GeometryOps.reproject"><code>GeometryOps.reproject</code></a></li><li><a href="#GeometryOps.segmentize-Tuple{Any}"><code>GeometryOps.segmentize</code></a></li><li><a href="#GeometryOps.signed_area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.signed_area</code></a></li><li><a href="#GeometryOps.signed_area"><code>GeometryOps.signed_area</code></a></li><li><a href="#GeometryOps.signed_distance"><code>GeometryOps.signed_distance</code></a></li><li><a href="#GeometryOps.signed_distance-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.signed_distance</code></a></li><li><a href="#GeometryOps.simplify-Tuple{GeometryOps.SimplifyAlg, Any}"><code>GeometryOps.simplify</code></a></li><li><a href="#GeometryOps.t_value-Union{Tuple{T2}, Tuple{T1}, Tuple{N}, Tuple{Union{NTuple{N, T1}, StaticArraysCore.StaticArray{Tuple{N}, T1, 1}}, Union{NTuple{N, T1}, StaticArraysCore.StaticArray{Tuple{N}, T1, 1}}, T2, T2}} where {N, T1&lt;:Number, T2&lt;:Number}"><code>GeometryOps.t_value</code></a></li><li><a href="#GeometryOps.to_edgelist-Union{Tuple{T}, Tuple{E}, Tuple{E, Any}, Tuple{E, Any, Type{T}}} where {E&lt;:Extents.Extent, T}"><code>GeometryOps.to_edgelist</code></a></li><li><a href="#GeometryOps.to_edgelist-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"><code>GeometryOps.to_edgelist</code></a></li><li><a href="#GeometryOps.to_edges-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"><code>GeometryOps.to_edges</code></a></li><li><a href="#GeometryOps.touches-Tuple{Any}"><code>GeometryOps.touches</code></a></li><li><a href="#GeometryOps.touches"><code>GeometryOps.touches</code></a></li><li><a href="#GeometryOps.touches-Tuple{Any, Any}"><code>GeometryOps.touches</code></a></li><li><a href="#GeometryOps.transform"><code>GeometryOps.transform</code></a></li><li><a href="#GeometryOps.transform-Tuple{Any, Any}"><code>GeometryOps.transform</code></a></li><li><a href="#GeometryOps.tuples-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"><code>GeometryOps.tuples</code></a></li><li><a href="#GeometryOps.union-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>GeometryOps.union</code></a></li><li><a href="#GeometryOps.weighted_mean-Union{Tuple{WT}, Tuple{WT, Any, Any}} where WT&lt;:Real"><code>GeometryOps.weighted_mean</code></a></li><li><a href="#GeometryOps.within-Tuple{Any, Any}"><code>GeometryOps.within</code></a></li><li><a href="#GeometryOps.within-Tuple{Any}"><code>GeometryOps.within</code></a></li><li><a href="#GeometryOps.within"><code>GeometryOps.within</code></a></li><li><a href="#GeometryOpsCore.apply-Union{Tuple{F}, Tuple{F, Any, Any}} where F"><code>GeometryOpsCore.apply</code></a></li><li><a href="#GeometryOpsCore.apply"><code>GeometryOpsCore.apply</code></a></li><li><a href="#GeometryOpsCore.applyreduce-Union{Tuple{O}, Tuple{F}, Tuple{F, O, Any, Any}} where {F, O}"><code>GeometryOpsCore.applyreduce</code></a></li><li><a href="#GeometryOpsCore.applyreduce"><code>GeometryOpsCore.applyreduce</code></a></li><li><a href="#GeometryOpsCore.best_manifold"><code>GeometryOpsCore.best_manifold</code></a></li><li><a href="#GeometryOpsCore.booltype"><code>GeometryOpsCore.booltype</code></a></li><li><a href="#GeometryOpsCore.flatten-Union{Tuple{Target}, Tuple{Type{Target}, Any}} where Target&lt;:GeoInterface.AbstractTrait"><code>GeometryOpsCore.flatten</code></a></li><li><a href="#GeometryOpsCore.manifold"><code>GeometryOpsCore.manifold</code></a></li><li><a href="#GeometryOpsCore.rebuild-Tuple{Any, Any}"><code>GeometryOpsCore.rebuild</code></a></li><li><a href="#GeometryOpsCore.reconstruct-Tuple{Any, Any}"><code>GeometryOpsCore.reconstruct</code></a></li><li><a href="#GeometryOpsCore.reconstruct_table-Tuple{Any, Any, Any, Any, Vararg{Any}}"><code>GeometryOpsCore.reconstruct_table</code></a></li><li><a href="#GeometryOpsCore.unwrap"><code>GeometryOpsCore.unwrap</code></a></li><li><a href="#GeometryOpsCore.used_reconstruct_table_kwargs-Tuple{Any}"><code>GeometryOpsCore.used_reconstruct_table_kwargs</code></a></li></ul><h2 id="Primitive-functions" tabindex="-1"><code>apply</code> and associated functions <a class="header-anchor" href="#Primitive-functions" aria-label="Permalink to &quot;`apply` and associated functions {#Primitive-functions}&quot;">​</a></h2>',5)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"GeometryOpsCore.apply",href:"#GeometryOpsCore.apply"},[i("span",{class:"jlbinding"},"GeometryOpsCore.apply")],-1)),s[1]||(s[1]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[3]||(s[3]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{TraitTarget, GI.AbstractTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reconstruct a geometry, feature, feature collection, or nested vectors of either using the function <code>f</code> on the <code>target</code> trait.</p><p><code>f(target_geom) =&gt; x</code> where <code>x</code> also has the <code>target</code> trait, or a trait that can be substituted. For example, swapping <code>PolgonTrait</code> to <code>MultiPointTrait</code> will fail if the outer object has <code>MultiPolygonTrait</code>, but should work if it has <code>FeatureTrait</code>.</p><p>Objects &quot;shallower&quot; than the target trait are always completely rebuilt, like a <code>Vector</code> of <code>FeatureCollectionTrait</code> of <code>FeatureTrait</code> when the target has <code>PolygonTrait</code> and is held in the features. These will always be GeoInterface geometries/feature/feature collections. But &quot;deeper&quot; objects may remain unchanged or be whatever GeoInterface compatible objects <code>f</code> returns.</p><p>The result is a functionally similar geometry with values depending on <code>f</code>.</p><ul><li><p><code>threaded</code>: <code>true</code> or <code>false</code>. Whether to use multithreading. Defaults to <code>false</code>.</p></li><li><p><code>crs</code>: The CRS to attach to geometries. Defaults to <code>nothing</code>.</p></li><li><p><code>calc_extent</code>: <code>true</code> or <code>false</code>. Whether to calculate the extent. Defaults to <code>false</code>.</p></li></ul><p><strong>Example</strong></p><p>Flipped point the order in any feature or geometry, or iterables of either:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flipped_geom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PointTrait, geom) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p), GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,9)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/apply.jl#L100-L134",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[s[4]||(s[4]=i("a",{id:"GeometryOpsCore.applyreduce",href:"#GeometryOpsCore.applyreduce"},[i("span",{class:"jlbinding"},"GeometryOpsCore.applyreduce")],-1)),s[5]||(s[5]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[7]||(s[7]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">applyreduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, op, target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{TraitTarget, GI.AbstractTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj; threaded, init, kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply function <code>f</code> to all objects with the <code>target</code> trait, and reduce the result with an <code>op</code> like <code>+</code>.</p><p>The order and grouping of application of <code>op</code> is not guaranteed.</p><p>If <code>threaded==true</code> threads will be used over arrays and iterables, feature collections and nested geometries.</p><p><code>init</code> functions the same way as it does in base Julia functions like <code>reduce</code>.</p>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/applyreduce.jl#L53-L65",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[s[8]||(s[8]=i("a",{id:"GeometryOps.reproject",href:"#GeometryOps.reproject"},[i("span",{class:"jlbinding"},"GeometryOps.reproject")],-1)),s[9]||(s[9]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[11]||(s[11]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reproject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry; source_crs, target_crs, transform, always_xy, time)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reproject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry, source_crs, target_crs; always_xy, time)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reproject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry, transform; always_xy, time)</span></span></code></pre></div><p>Reproject any GeoInterface.jl compatible <code>geometry</code> from <code>source_crs</code> to <code>target_crs</code>.</p><p>The returned object will be constructed from GeoInterface wrapper geometries, wrapping <code>Vector{NTuple{D, Float64}}</code>, where <code>D</code> is the dimension.</p><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>The <code>Proj.jl</code> package must be loaded for this method to work, since it is implemented in a package extension.</p></div><p><strong>Arguments</strong></p><ul><li><p><code>geometry</code>: Any GeoInterface.jl compatible geometries.</p></li><li><p><code>source_crs</code>: the source coordinate reference system, as a GeoFormatTypes.jl object or a string.</p></li><li><p><code>target_crs</code>: the target coordinate reference system, as a GeoFormatTypes.jl object or a string.</p></li></ul><p>If these a passed as keywords, <code>transform</code> will take priority. Without it <code>target_crs</code> is always needed, and <code>source_crs</code> is needed if it is not retrievable from the geometry with <code>GeoInterface.crs(geometry)</code>.</p><p><strong>Keywords</strong></p><ul><li><p><code>always_xy</code>: force x, y coordinate order, <code>true</code> by default. <code>false</code> will expect and return points in the crs coordinate order.</p></li><li><p><code>time</code>: the time for the coordinates. <code>Inf</code> by default.</p></li><li><p><code>threaded</code>: <code>true</code> or <code>false</code>. Whether to use multithreading. Defaults to <code>false</code>.</p></li><li><p><code>crs</code>: The CRS to attach to geometries. Defaults to <code>nothing</code>.</p></li><li><p><code>calc_extent</code>: <code>true</code> or <code>false</code>. Whether to calculate the extent. Defaults to <code>false</code>.</p></li></ul>`,9)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/reproject.jl#L13-L43",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[s[12]||(s[12]=i("a",{id:"GeometryOps.transform",href:"#GeometryOps.transform"},[i("span",{class:"jlbinding"},"GeometryOps.transform")],-1)),s[13]||(s[13]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[15]||(s[15]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, obj)</span></span></code></pre></div><p>Apply a function <code>f</code> to all the points in <code>obj</code>.</p><p>Points will be passed to <code>f</code> as an <code>SVector</code> to allow using CoordinateTransformations.jl and Rotations.jl without hassle.</p><p><code>SVector</code> is also a valid GeoInterface.jl point, so will work in all GeoInterface.jl methods.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> geom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]), GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CoordinateTransformations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Translation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Translation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, geom)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Polygon{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearRing{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64}}, Nothing, Nothing}}, Nothing, Nothing}(GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Linea</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rRing{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64}}, Nothing, Nothing}[GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing{false, false, Vector{StaticArraysCore.SVector{2, Float64}}, Nothing, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StaticArraysCo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64}[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing{false, false, Vector{StaticArraysCore.SVector{2, Float64}}, Nothing, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StaticA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64}[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>With Rotations.jl you need to actually multiply the Rotation by the <code>SVector</code> point, which is easy using an anonymous function.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rotations</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RotMatrix{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p, geom)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Polygon{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearRing{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Int64}}, Nothing, Nothing}}, Nothing, Nothing}(GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ing{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Int64}}, Nothing, Nothing}[GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing{false, false, Vector{StaticArraysCore.SVector{2, Int64}}, Nothing, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctor{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Int64}[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing{false, false, Vector{StaticArraysCore.SVector{2, Int64}}, Nothing, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Int64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,8)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/transform.jl#L24-L67",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[743]||(s[743]=i("h2",{id:"General-geometry-methods",tabindex:"-1"},[l("General geometry methods "),i("a",{class:"header-anchor",href:"#General-geometry-methods","aria-label":'Permalink to "General geometry methods {#General-geometry-methods}"'},"​")],-1)),s[744]||(s[744]=i("h3",{id:"OGC-methods",tabindex:"-1"},[l("OGC methods "),i("a",{class:"header-anchor",href:"#OGC-methods","aria-label":'Permalink to "OGC methods {#OGC-methods}"'},"​")],-1)),i("details",E,[i("summary",null,[s[16]||(s[16]=i("a",{id:"GeometryOps.contains",href:"#GeometryOps.contains"},[i("span",{class:"jlbinding"},"GeometryOps.contains")],-1)),s[17]||(s[17]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[20]||(s[20]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, g2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if the second geometry is completely contained by the first geometry. The interiors of both geometries must intersect and the interior and boundary of the secondary (g2) must not intersect the exterior of the first (g1).</p><p><code>contains</code> returns the exact opposite result of <code>within</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line, point)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[18]||(s[18]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/contains.jl#L43-L64",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[21]||(s[21]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input contains <code>g1</code>. This is equivalent to <code>x -&gt; contains(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[19]||(s[19]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/contains.jl#L67-L72",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",u,[i("summary",null,[s[22]||(s[22]=i("a",{id:"GeometryOps.coveredby",href:"#GeometryOps.coveredby"},[i("span",{class:"jlbinding"},"GeometryOps.coveredby")],-1)),s[23]||(s[23]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[26]||(s[26]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coveredby</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1, g2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the first geometry is completely covered by the second geometry. The interior and boundary of the primary geometry (g1) must not intersect the exterior of the secondary geometry (g2).</p><p>Furthermore, <code>coveredby</code> returns the exact opposite result of <code>covers</code>. They are equivalent with the order of the arguments swapped.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([p1, p2])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coveredby</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p1, l1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[24]||(s[24]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/coveredby.jl#L58-L79",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[27]||(s[27]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coveredby</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input is covered by <code>g1</code>. This is equivalent to <code>x -&gt; coveredby(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[25]||(s[25]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/coveredby.jl#L82-L87",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[28]||(s[28]=i("a",{id:"GeometryOps.covers",href:"#GeometryOps.covers"},[i("span",{class:"jlbinding"},"GeometryOps.covers")],-1)),s[29]||(s[29]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[32]||(s[32]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">covers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, g2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if the first geometry is completely covers the second geometry, The exterior and boundary of the second geometry must not be outside of the interior and boundary of the first geometry. However, the interiors need not intersect.</p><p><code>covers</code> returns the exact opposite result of <code>coveredby</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">covers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l1, l2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/covers.jl#L42-L63",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[33]||(s[33]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">covers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input covers <code>g1</code>. This is equivalent to <code>x -&gt; covers(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[31]||(s[31]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/covers.jl#L66-L71",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",T,[i("summary",null,[s[34]||(s[34]=i("a",{id:"GeometryOps.crosses",href:"#GeometryOps.crosses"},[i("span",{class:"jlbinding"},"GeometryOps.crosses")],-1)),s[35]||(s[35]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[38]||(s[38]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crosses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the intersection results in a geometry whose dimension is one less than the maximum dimension of the two source geometries and the intersection set is interior to both source geometries.</p><p>TODO: broken</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TODO</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: Add working example</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[36]||(s[36]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/crosses.jl#L3-L17",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[39]||(s[39]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">crosses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input crosses <code>g1</code>. This is equivalent to <code>x -&gt; crosses(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[37]||(s[37]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/crosses.jl#L29-L34",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[s[40]||(s[40]=i("a",{id:"GeometryOps.disjoint",href:"#GeometryOps.disjoint"},[i("span",{class:"jlbinding"},"GeometryOps.disjoint")],-1)),s[41]||(s[41]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[44]||(s[44]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disjoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the first geometry is disjoint from the second geometry.</p><p>Return <code>true</code> if the first geometry is disjoint from the second geometry. The interiors and boundaries of both geometries must not intersect.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disjoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point, line)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[42]||(s[42]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/disjoint.jl#L56-L75",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[45]||(s[45]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disjoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input is disjoint from <code>g1</code>. This is equivalent to <code>x -&gt; disjoint(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[43]||(s[43]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/disjoint.jl#L78-L83",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[46]||(s[46]=i("a",{id:"GeometryOps.intersects",href:"#GeometryOps.intersects"},[i("span",{class:"jlbinding"},"GeometryOps.intersects")],-1)),s[47]||(s[47]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[50]||(s[50]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if the interiors or boundaries of the two geometries interact.</p><p><code>intersects</code> returns the exact opposite result of <code>disjoint</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">124.584961</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12.768946</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">126.738281</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17.224758</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123.354492</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15.961329</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.22168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14.008696</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line1, line2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[48]||(s[48]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/intersects.jl#L38-L57",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[51]||(s[51]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input intersects <code>g1</code>. This is equivalent to <code>x -&gt; intersects(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[49]||(s[49]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/intersects.jl#L60-L65",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",F,[i("summary",null,[s[52]||(s[52]=i("a",{id:"GeometryOps.overlaps",href:"#GeometryOps.overlaps"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[53]||(s[53]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[64]||(s[64]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Compare two Geometries of the same dimension and return true if their intersection set results in a geometry different from both but of the same dimension. This means one geometry cannot be within or contain the other and they cannot be equal</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly1, poly2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[54]||(s[54]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L53-L71",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[65]||(s[65]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input overlaps <code>g1</code>. This is equivalent to <code>x -&gt; overlaps(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[55]||(s[55]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L79-L84",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[66]||(s[66]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.AbstractTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.AbstractTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>For any non-specified pair, all have non-matching dimensions, return false.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[56]||(s[56]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L87-L91",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[67]||(s[67]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>If the multipoints overlap, meaning some, but not all, of the points within the multipoints are shared, return true.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[57]||(s[57]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L94-L102",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[68]||(s[68]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LineTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LineTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>If the lines overlap, meaning that they are collinear but each have one endpoint outside of the other line, return true. Else false.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[58]||(s[58]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L124-L129",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[69]||(s[69]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineStringTrait, GI.LinearRing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineStringTrait, GI.LinearRing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>If the curves overlap, meaning that at least one edge of each curve overlaps, return true. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[59]||(s[59]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L133-L141",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[70]||(s[70]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trait_a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly_a,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trait_b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly_b,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>If the two polygons intersect with one another, but are not equal, return true. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[60]||(s[60]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L155-L163",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[71]||(s[71]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, polys2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if polygon overlaps with at least one of the polygons within the multipolygon. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[61]||(s[61]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L173-L181",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[72]||(s[72]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, polys1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if polygon overlaps with at least one of the polygons within the multipolygon. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[62]||(s[62]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L192-L200",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[73]||(s[73]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, polys1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, polys2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if at least one pair of polygons from multipolygons overlap. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[63]||(s[63]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L204-L212",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[s[74]||(s[74]=i("a",{id:"GeometryOps.touches",href:"#GeometryOps.touches"},[i("span",{class:"jlbinding"},"GeometryOps.touches")],-1)),s[75]||(s[75]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[78]||(s[78]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">touches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the first geometry touches the second geometry. In other words, the two interiors cannot interact, but one of the geometries must have a boundary point that interacts with either the other geometry&#39;s interior or boundary.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">touches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l1, l2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[76]||(s[76]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/touches.jl#L59-L78",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[79]||(s[79]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">touches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input touches <code>g1</code>. This is equivalent to <code>x -&gt; touches(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[77]||(s[77]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/touches.jl#L81-L86",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[s[80]||(s[80]=i("a",{id:"GeometryOps.within",href:"#GeometryOps.within"},[i("span",{class:"jlbinding"},"GeometryOps.within")],-1)),s[81]||(s[81]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[84]||(s[84]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the first geometry is completely within the second geometry. The interiors of both geometries must intersect and the interior and boundary of the primary geometry (geom1) must not intersect the exterior of the secondary geometry (geom2).</p><p>Furthermore, <code>within</code> returns the exact opposite result of <code>contains</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point, line)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[82]||(s[82]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/within.jl#L61-L82",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[85]||(s[85]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input is within <code>g1</code>. This is equivalent to <code>x -&gt; within(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[83]||(s[83]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/within.jl#L85-L90",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[745]||(s[745]=i("h3",{id:"Other-general-methods",tabindex:"-1"},[l("Other general methods "),i("a",{class:"header-anchor",href:"#Other-general-methods","aria-label":'Permalink to "Other general methods {#Other-general-methods}"'},"​")],-1)),i("details",_,[i("summary",null,[s[86]||(s[86]=i("a",{id:"GeometryOps.equals",href:"#GeometryOps.equals"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[87]||(s[87]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[103]||(s[103]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Compare two Geometries return true if they are the same geometry.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly1, poly2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[88]||(s[88]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L52-L67",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[104]||(s[104]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two geometries of the same type, which don&#39;t have a equals function to dispatch off of should throw an error.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[89]||(s[89]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L73-L78",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[105]||(s[105]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(trait_a, geom_a, trait_b, geom_b)</span></span></code></pre></div><p>Two geometries which are not of the same type cannot be equal so they always return false.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[90]||(s[90]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L81-L86",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[106]||(s[106]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two points are the same if they have the same x and y (and z if 3D) coordinates.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[91]||(s[91]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L89-L93",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[107]||(s[107]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A point and a multipoint are equal if the multipoint is composed of a single point that is equivalent to the given point.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[92]||(s[92]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L104-L109",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[108]||(s[108]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A point and a multipoint are equal if the multipoint is composed of a single point that is equivalent to the given point.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[93]||(s[93]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L115-L120",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[109]||(s[109]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two multipoints are equal if they share the same set of points.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[94]||(s[94]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L124-L128",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[110]||(s[110]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineTrait, GI.LineStringTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineTrait, GI.LineStringTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two lines/linestrings are equal if they share the same set of points going along the curve. Note that lines/linestrings aren&#39;t closed by definition.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[95]||(s[95]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L206-L214",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[111]||(s[111]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineTrait, GI.LineStringTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A line/linestring and a linear ring are equal if they share the same set of points going along the curve. Note that lines aren&#39;t closed by definition, but rings are, so the line must have a repeated last point to be equal</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[96]||(s[96]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L220-L229",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[112]||(s[112]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineTrait, GI.LineStringTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A linear ring and a line/linestring are equal if they share the same set of points going along the curve. Note that lines aren&#39;t closed by definition, but rings are, so the line must have a repeated last point to be equal</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[97]||(s[97]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L235-L244",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[113]||(s[113]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two linear rings are equal if they share the same set of points going along the curve. Note that rings are closed by definition, so they can have, but don&#39;t need, a repeated last point to be equal.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[98]||(s[98]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L250-L259",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[114]||(s[114]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two polygons are equal if they share the same exterior edge and holes.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[99]||(s[99]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L265-L269",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[115]||(s[115]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A polygon and a multipolygon are equal if the multipolygon is composed of a single polygon that is equivalent to the given polygon.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[100]||(s[100]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L295-L300",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[116]||(s[116]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A polygon and a multipolygon are equal if the multipolygon is composed of a single polygon that is equivalent to the given polygon.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[101]||(s[101]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L306-L311",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[117]||(s[117]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two multipolygons are equal if they share the same set of polygons.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[102]||(s[102]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L315-L319",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",G,[i("summary",null,[s[118]||(s[118]=i("a",{id:"GeometryOps.centroid",href:"#GeometryOps.centroid"},[i("span",{class:"jlbinding"},"GeometryOps.centroid")],-1)),s[119]||(s[119]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[121]||(s[121]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{T, T}</span></span></code></pre></div><p>Returns the centroid of a given line segment, linear ring, polygon, or mutlipolygon.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[120]||(s[120]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/centroid.jl#L51-L56",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",j,[i("summary",null,[s[122]||(s[122]=i("a",{id:"GeometryOps.distance",href:"#GeometryOps.distance"},[i("span",{class:"jlbinding"},"GeometryOps.distance")],-1)),s[123]||(s[123]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[125]||(s[125]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point, geom, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Calculates the ditance from the geometry <code>g1</code> to the <code>point</code>. The distance will always be positive or zero.</p><p>The method will differ based on the type of the geometry provided: - The distance from a point to a point is just the Euclidean distance between the points. - The distance from a point to a line is the minimum distance from the point to the closest point on the given line. - The distance from a point to a linestring is the minimum distance from the point to the closest segment of the linestring. - The distance from a point to a linear ring is the minimum distance from the point to the closest segment of the linear ring. - The distance from a point to a polygon is zero if the point is within the polygon and otherwise is the minimum distance from the point to an edge of the polygon. This includes edges created by holes. - The distance from a point to a multigeometry or a geometry collection is the minimum distance between the point and any of the sub-geometries.</p><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[124]||(s[124]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/distance.jl#L67-L90",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",v,[i("summary",null,[s[126]||(s[126]=i("a",{id:"GeometryOps.signed_distance",href:"#GeometryOps.signed_distance"},[i("span",{class:"jlbinding"},"GeometryOps.signed_distance")],-1)),s[127]||(s[127]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[129]||(s[129]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">signed_distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point, geom, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Calculates the signed distance from the geometry <code>geom</code> to the given point. Points within <code>geom</code> have a negative signed distance, and points outside of <code>geom</code> have a positive signed distance. - The signed distance from a point to a point, line, linestring, or linear ring is equal to the distance between the two. - The signed distance from a point to a polygon is negative if the point is within the polygon and is positive otherwise. The value of the distance is the minimum distance from the point to an edge of the polygon. This includes edges created by holes. - The signed distance from a point to a multigeometry or a geometry collection is the minimum signed distance between the point and any of the sub-geometries.</p><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[128]||(s[128]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/distance.jl#L133-L151",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",O,[i("summary",null,[s[130]||(s[130]=i("a",{id:"GeometryOps.area",href:"#GeometryOps.area"},[i("span",{class:"jlbinding"},"GeometryOps.area")],-1)),s[131]||(s[131]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[133]||(s[133]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Returns the area of a geometry or collection of geometries. This is computed slightly differently for different geometries:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- The area of a point/multipoint is always zero.</span></span>
<span class="line"><span>- The area of a curve/multicurve is always zero.</span></span>
<span class="line"><span>- The area of a polygon is the absolute value of the signed area.</span></span>
<span class="line"><span>- The area multi-polygon is the sum of the areas of all of the sub-polygons.</span></span>
<span class="line"><span>- The area of a geometry collection, feature collection of array/iterable </span></span>
<span class="line"><span>    is the sum of the areas of all of the sub-geometries.</span></span></code></pre></div><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[132]||(s[132]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/area.jl#L53-L68",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",B,[i("summary",null,[s[134]||(s[134]=i("a",{id:"GeometryOps.signed_area",href:"#GeometryOps.signed_area"},[i("span",{class:"jlbinding"},"GeometryOps.signed_area")],-1)),s[135]||(s[135]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[137]||(s[137]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">signed_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Returns the signed area of a single geometry, based on winding order. This is computed slightly differently for different geometries:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- The signed area of a point is always zero.</span></span>
<span class="line"><span>- The signed area of a curve is always zero.</span></span>
<span class="line"><span>- The signed area of a polygon is computed with the shoelace formula and is</span></span>
<span class="line"><span>positive if the polygon coordinates wind clockwise and negative if</span></span>
<span class="line"><span>counterclockwise.</span></span>
<span class="line"><span>- You cannot compute the signed area of a multipolygon as it doesn&#39;t have a</span></span>
<span class="line"><span>meaning as each sub-polygon could have a different winding order.</span></span></code></pre></div><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[136]||(s[136]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/area.jl#L77-L93",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",D,[i("summary",null,[s[138]||(s[138]=i("a",{id:"GeometryOps.angles",href:"#GeometryOps.angles"},[i("span",{class:"jlbinding"},"GeometryOps.angles")],-1)),s[139]||(s[139]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[141]||(s[141]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">angles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64)</span></span></code></pre></div><p>Returns the angles of a geometry or collection of geometries. This is computed differently for different geometries:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- The angles of a point is an empty vector.</span></span>
<span class="line"><span>- The angles of a single line segment is an empty vector.</span></span>
<span class="line"><span>- The angles of a linestring or linearring is a vector of angles formed by the curve.</span></span>
<span class="line"><span>- The angles of a polygon is a vector of vectors of angles formed by each ring.</span></span>
<span class="line"><span>- The angles of a multi-geometry collection is a vector of the angles of each of the</span></span>
<span class="line"><span>    sub-geometries as defined above.</span></span></code></pre></div><p>Result will be a Vector, or nested set of vectors, of type T where an optional argument with a default value of Float64.</p>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[140]||(s[140]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/angles.jl#L33-L48",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",x,[i("summary",null,[s[142]||(s[142]=i("a",{id:"GeometryOps.embed_extent",href:"#GeometryOps.embed_extent"},[i("span",{class:"jlbinding"},"GeometryOps.embed_extent")],-1)),s[143]||(s[143]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[145]||(s[145]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">embed_extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span></code></pre></div><p>Recursively wrap the object with a GeoInterface.jl geometry, calculating and adding an <code>Extents.Extent</code> to all objects.</p><p>This can improve performance when extents need to be checked multiple times, such when needing to check if many points are in geometries, and using their extents as a quick filter for obviously exterior points.</p><p><strong>Keywords</strong></p><ul><li><p><code>threaded</code>: <code>true</code> or <code>false</code>. Whether to use multithreading. Defaults to <code>false</code>.</p></li><li><p><code>crs</code>: The CRS to attach to geometries. Defaults to <code>nothing</code>.</p></li></ul>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[144]||(s[144]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/extent.jl#L3-L17",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[746]||(s[746]=t('<h2 id="Barycentric-coordinates" tabindex="-1">Barycentric coordinates <a class="header-anchor" href="#Barycentric-coordinates" aria-label="Permalink to &quot;Barycentric coordinates {#Barycentric-coordinates}&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>barycentric_coordinates</code>. Check Documenter&#39;s build log for details.</p></div><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>barycentric_coordinates!</code>. Check Documenter&#39;s build log for details.</p></div><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>barycentric_interpolate</code>. Check Documenter&#39;s build log for details.</p></div><h2 id="Other-methods" tabindex="-1">Other methods <a class="header-anchor" href="#Other-methods" aria-label="Permalink to &quot;Other methods {#Other-methods}&quot;">​</a></h2>',5)),i("details",I,[i("summary",null,[s[146]||(s[146]=i("a",{id:"GeometryOps.GEOMETRYOPS_NO_OPTIMIZE_EDGEINTERSECT_NUMVERTS",href:"#GeometryOps.GEOMETRYOPS_NO_OPTIMIZE_EDGEINTERSECT_NUMVERTS"},[i("span",{class:"jlbinding"},"GeometryOps.GEOMETRYOPS_NO_OPTIMIZE_EDGEINTERSECT_NUMVERTS")],-1)),s[147]||(s[147]=l()),a(e,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),s[149]||(s[149]=i("p",null,"The number of vertices past which we should use a STRtree for edge intersection checking.",-1)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[148]||(s[148]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/clipping_processor.jl#L169",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",S,[i("summary",null,[s[150]||(s[150]=i("a",{id:"GeometryOps._VecTypes",href:"#GeometryOps._VecTypes"},[i("span",{class:"jlbinding"},"GeometryOps._VecTypes")],-1)),s[151]||(s[151]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[153]||(s[153]=i("p",null,"native Julia vector-like types with known size",-1)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[152]||(s[152]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/barycentric.jl#L106",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",w,[i("summary",null,[s[154]||(s[154]=i("a",{id:"GeometryOps.AbstractBarycentricCoordinateMethod",href:"#GeometryOps.AbstractBarycentricCoordinateMethod"},[i("span",{class:"jlbinding"},"GeometryOps.AbstractBarycentricCoordinateMethod")],-1)),s[155]||(s[155]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[157]||(s[157]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractBarycentricCoordinateMethod</span></span></code></pre></div><p>Abstract supertype for barycentric coordinate methods. The subtypes may serve as dispatch types, or may cache some information about the target polygon.</p><p><strong>API</strong></p><p>The following methods must be implemented for all subtypes:</p><ul><li><p><code>barycentric_coordinates!(λs::Vector{&lt;: Real}, method::AbstractBarycentricCoordinateMethod, exterior::Vector{&lt;: Point{2, T1}}, point::Point{2, T2})</code></p></li><li><p><code>barycentric_interpolate(method::AbstractBarycentricCoordinateMethod, exterior::Vector{&lt;: Point{2, T1}}, values::Vector{V}, point::Point{2, T2})::V</code></p></li><li><p><code>barycentric_interpolate(method::AbstractBarycentricCoordinateMethod, exterior::Vector{&lt;: Point{2, T1}}, interiors::Vector{&lt;: Vector{&lt;: Point{2, T1}}} values::Vector{V}, point::Point{2, T2})::V</code></p></li></ul><p>The rest of the methods will be implemented in terms of these, and have efficient dispatches for broadcasting.</p>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[156]||(s[156]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/barycentric.jl#L109-L122",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",P,[i("summary",null,[s[158]||(s[158]=i("a",{id:"GeometryOps.AutoAccelerator",href:"#GeometryOps.AutoAccelerator"},[i("span",{class:"jlbinding"},"GeometryOps.AutoAccelerator")],-1)),s[159]||(s[159]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[161]||(s[161]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AutoAccelerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Let the algorithm choose the best accelerator based on the size of the input polygons.</p><p>Once we have prepared geometry, this will also consider the existing preparations on the geoms.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[160]||(s[160]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/clipping_processor.jl#L33-L39",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Q,[i("summary",null,[s[162]||(s[162]=i("a",{id:"GeometryOps.CLibraryPlanarAlgorithm",href:"#GeometryOps.CLibraryPlanarAlgorithm"},[i("span",{class:"jlbinding"},"GeometryOps.CLibraryPlanarAlgorithm")],-1)),s[163]||(s[163]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[165]||(s[165]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CLibraryPlanarAlgorithm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeometryOpsCore.SingleManifoldAlgorithm{Planar}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>This is a type which extends <code>GeometryOpsCore.SingleManifoldAlgorithm{Planar}</code>, and is used as an abstract supertype for some C library based algorithms.</p><p>The type requires that algorithm structs be arranged as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct MyAlgorithm &lt;: CLibraryPlanarAlgorithm</span></span>
<span class="line"><span>    manifold::Planar</span></span>
<span class="line"><span>    params::NamedTuple</span></span>
<span class="line"><span>end</span></span></code></pre></div><p>Then you get a nice constructor for free, as well as the <code>get(alg, key, value)</code> and <code>get(alg, key) do ...</code> syntax. Plus the <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.enforce-Tuple{GeometryOps.CLibraryPlanarAlgorithm, Symbol, Any}"><code>enforce</code></a> method, which will check that given keyword arguments are present.</p>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[164]||(s[164]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/types.jl#L34-L52",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",L,[i("summary",null,[s[166]||(s[166]=i("a",{id:"GeometryOps.ClosedRing",href:"#GeometryOps.ClosedRing"},[i("span",{class:"jlbinding"},"GeometryOps.ClosedRing")],-1)),s[167]||(s[167]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[169]||(s[169]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClosedRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeometryCorrection</span></span></code></pre></div><p>This correction ensures that a polygon&#39;s exterior and interior rings are closed.</p><p>It can be called on any geometry correction as usual.</p><p>See also <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.GeometryCorrection"><code>GeometryCorrection</code></a>.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[168]||(s[168]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/correction/closed_ring.jl#L38-L46",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",V,[i("summary",null,[s[170]||(s[170]=i("a",{id:"GeometryOps.DiffIntersectingPolygons",href:"#GeometryOps.DiffIntersectingPolygons"},[i("span",{class:"jlbinding"},"GeometryOps.DiffIntersectingPolygons")],-1)),s[171]||(s[171]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[173]||(s[173]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiffIntersectingPolygons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeometryCorrection</span></span></code></pre></div><p>This correction ensures that the polygons included in a multipolygon aren&#39;t intersecting. If any polygon&#39;s are intersecting, they will be made nonintersecting through the <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.difference-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T&lt;:AbstractFloat"><code>difference</code></a> operation to create a unique set of disjoint (other than potentially connections by a single point) polygons covering the same area. See also <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.GeometryCorrection"><code>GeometryCorrection</code></a>, <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.UnionIntersectingPolygons"><code>UnionIntersectingPolygons</code></a>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[172]||(s[172]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/correction/intersecting_polygons.jl#L92-L99",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",R,[i("summary",null,[s[174]||(s[174]=i("a",{id:"GeometryOps.DouglasPeucker",href:"#GeometryOps.DouglasPeucker"},[i("span",{class:"jlbinding"},"GeometryOps.DouglasPeucker")],-1)),s[175]||(s[175]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[177]||(s[177]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DouglasPeucker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SimplifyAlg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DouglasPeucker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; number, ratio, tol)</span></span></code></pre></div><p>Simplifies geometries by removing points below <code>tol</code> distance from the line between its neighboring points.</p><p><strong>Keywords</strong></p><ul><li><p><code>ratio</code>: the fraction of points that should remain after <code>simplify</code>. Useful as it will generalise for large collections of objects.</p></li><li><p><code>number</code>: the number of points that should remain after <code>simplify</code>. Less useful for large collections of mixed size objects.</p></li><li><p><code>tol</code>: the minimum distance a point will be from the line joining its neighboring points.</p></li></ul><p>Note: user input <code>tol</code> is squared to avoid unnecessary computation in algorithm.</p>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[176]||(s[176]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/simplify.jl#L248-L258",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",M,[i("summary",null,[s[178]||(s[178]=i("a",{id:"GeometryOps.FosterHormannClipping",href:"#GeometryOps.FosterHormannClipping"},[i("span",{class:"jlbinding"},"GeometryOps.FosterHormannClipping")],-1)),s[179]||(s[179]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[181]||(s[181]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FosterHormannClipping{M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Manifold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union{Nothing, Accelerator}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeometryOpsCore.Algorithm{M}</span></span></code></pre></div><p>Applies the Foster-Hormann clipping algorithm.</p><p><strong>Arguments</strong></p><ul><li><p><code>manifold::M</code>: The manifold on which the algorithm operates.</p></li><li><p><code>accelerator::A</code>: The accelerator to use for the algorithm. Can be <code>nothing</code> for automatic choice, or a custom accelerator.</p></li></ul>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[180]||(s[180]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/clipping_processor.jl#L42-L50",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",N,[i("summary",null,[s[182]||(s[182]=i("a",{id:"GeometryOps.GEOS",href:"#GeometryOps.GEOS"},[i("span",{class:"jlbinding"},"GeometryOps.GEOS")],-1)),s[183]||(s[183]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[185]||(s[185]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GEOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A struct which instructs the method it&#39;s passed to as an algorithm to use the appropriate GEOS function via <code>LibGEOS.jl</code> for the operation.</p><p>Dispatch is generally carried out using the names of the keyword arguments. For example, <code>segmentize</code> will only accept a <code>GEOS</code> struct with only a <code>max_distance</code> keyword, and no other.</p><p>It&#39;s generally somewhat slower than the native Julia implementations, since it must convert to the LibGEOS implementation and back - so be warned!</p><p><strong>Extended help</strong></p><p>This uses the <a href="https://github.com/JuliaGeometry/LibGEOS.jl" target="_blank" rel="noreferrer">LibGEOS.jl</a> package, which is a Julia wrapper around the C library GEOS (<a href="https://trac.osgeo.org/geos" target="_blank" rel="noreferrer">https://trac.osgeo.org/geos</a>).</p>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[184]||(s[184]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/types.jl#L104-L121",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",q,[i("summary",null,[s[186]||(s[186]=i("a",{id:"GeometryOps.GeodesicSegments",href:"#GeometryOps.GeodesicSegments"},[i("span",{class:"jlbinding"},"GeometryOps.GeodesicSegments")],-1)),s[187]||(s[187]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[189]||(s[189]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GeodesicSegments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; max_distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, equatorial_radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6378137</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, flattening</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">298.257223563</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This is deprecated - call <code>segmentize(Geodesic(; semimajor_axis, inv_flattening), geom; max_distance)</code> instead.</p></div><p>A method for segmentizing geometries by adding extra vertices to the geometry so that no segment is longer than a given distance. This method calculates the distance between points on the geodesic, and assumes input in lat/long coordinates.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>Any input geometries must be in lon/lat coordinates! If not, the method may fail or error.</p></div><p><strong>Arguments</strong></p><ul><li><p><code>max_distance::Real</code>: The maximum distance, <strong>in meters</strong>, between vertices in the geometry.</p></li><li><p><code>equatorial_radius::Real=6378137</code>: The equatorial radius of the Earth, in meters. Passed to <code>Proj.geod_geodesic</code>.</p></li><li><p><code>flattening::Real=1/298.257223563</code>: The flattening of the Earth, which is the ratio of the difference between the equatorial and polar radii to the equatorial radius. Passed to <code>Proj.geod_geodesic</code>.</p></li></ul><p>One can also omit the <code>equatorial_radius</code> and <code>flattening</code> keyword arguments, and pass a <code>geodesic</code> object directly to the eponymous keyword.</p><p>This method uses the Proj/GeographicLib API for geodesic calculations.</p>',8)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[188]||(s[188]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/segmentize.jl#L127-L147",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",J,[i("summary",null,[s[190]||(s[190]=i("a",{id:"GeometryOps.GeometryCorrection",href:"#GeometryOps.GeometryCorrection"},[i("span",{class:"jlbinding"},"GeometryOps.GeometryCorrection")],-1)),s[191]||(s[191]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[193]||(s[193]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryCorrection</span></span></code></pre></div><p>This abstract type represents a geometry correction.</p><p><strong>Interface</strong></p><p>Any <code>GeometryCorrection</code> must implement two functions: * <code>application_level(::GeometryCorrection)::AbstractGeometryTrait</code>: This function should return the <code>GeoInterface</code> trait that the correction is intended to be applied to, like <code>PointTrait</code> or <code>LineStringTrait</code> or <code>PolygonTrait</code>. * <code>(::GeometryCorrection)(::AbstractGeometryTrait, geometry)::(some_geometry)</code>: This function should apply the correction to the given geometry, and return a new geometry.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[192]||(s[192]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/correction/geometry_correction.jl#L28-L38",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",H,[i("summary",null,[s[194]||(s[194]=i("a",{id:"GeometryOps.IntersectionAccelerator",href:"#GeometryOps.IntersectionAccelerator"},[i("span",{class:"jlbinding"},"GeometryOps.IntersectionAccelerator")],-1)),s[195]||(s[195]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[197]||(s[197]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntersectionAccelerator</span></span></code></pre></div><p>The abstract supertype for all intersection accelerator types.</p><p>The idea is that these speed up the edge-edge intersection checking process, perhaps at the cost of memory.</p><p>The naive case is <code>NestedLoop</code>, which is just a nested loop, running in O(n*m) time.</p><p>Then we have <code>SingleSTRtree</code>, which is a single STRtree, running in O(n*log(m)) time.</p><p>Then we have <code>DoubleSTRtree</code>, which is a simultaneous double-tree traversal of two STRtrees.</p><p>Finally, we have <code>AutoAccelerator</code>, which chooses the best accelerator based on the size of the input polygons. This gets materialized in <code>build_a_list</code> for now. <code>AutoAccelerator</code> should also try to respect existing spatial indices, if they exist.</p>',7)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[196]||(s[196]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/clipping_processor.jl#L7-L24",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",U,[i("summary",null,[s[198]||(s[198]=i("a",{id:"GeometryOps.LineOrientation",href:"#GeometryOps.LineOrientation"},[i("span",{class:"jlbinding"},"GeometryOps.LineOrientation")],-1)),s[199]||(s[199]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[201]||(s[201]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Enum LineOrientation</span></span></code></pre></div><p>Enum for the orientation of a line with respect to a curve. A line can be <code>line_cross</code> (crossing over the curve), <code>line_hinge</code> (crossing the endpoint of the curve), <code>line_over</code> (collinear with the curve), or <code>line_out</code> (not interacting with the curve).</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[200]||(s[200]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/intersection.jl#L4-L9",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",W,[i("summary",null,[s[202]||(s[202]=i("a",{id:"GeometryOps.LinearSegments",href:"#GeometryOps.LinearSegments"},[i("span",{class:"jlbinding"},"GeometryOps.LinearSegments")],-1)),s[203]||(s[203]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[205]||(s[205]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearSegments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; max_distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This is deprecated - call <code>segmentize(Planar(), geom; max_distance)</code> instead.</p></div><p>A method for segmentizing geometries by adding extra vertices to the geometry so that no segment is longer than a given distance.</p><p>Here, <code>max_distance</code> is a purely nondimensional quantity and will apply in the input space. This is to say, that if the polygon is provided in lat/lon coordinates then the <code>max_distance</code> will be in degrees of arc. If the polygon is provided in meters, then the <code>max_distance</code> will be in meters.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[204]||(s[204]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/segmentize.jl#L111-L122",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",z,[i("summary",null,[s[206]||(s[206]=i("a",{id:"GeometryOps.MeanValue",href:"#GeometryOps.MeanValue"},[i("span",{class:"jlbinding"},"GeometryOps.MeanValue")],-1)),s[207]||(s[207]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[209]||(s[209]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MeanValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractBarycentricCoordinateMethod</span></span></code></pre></div><p>This method calculates barycentric coordinates using the mean value method.</p><p><strong>References</strong></p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[208]||(s[208]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/barycentric.jl#L183-L190",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Z,[i("summary",null,[s[210]||(s[210]=i("a",{id:"GeometryOps.MonotoneChainMethod",href:"#GeometryOps.MonotoneChainMethod"},[i("span",{class:"jlbinding"},"GeometryOps.MonotoneChainMethod")],-1)),s[211]||(s[211]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[213]||(s[213]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MonotoneChainMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>This is an algorithm for the <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.convex_hull"><code>convex_hull</code></a> function.</p><p>Uses <a href="https://github.com/JuliaGeometry/DelaunayTriangulation.jl" target="_blank" rel="noreferrer"><code>DelaunayTriangulation.jl</code></a> to compute the convex hull. This is a pure Julia algorithm which provides an optimal Delaunay triangulation.</p><p>See also <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.convex_hull"><code>convex_hull</code></a></p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[212]||(s[212]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/convex_hull.jl#L94-L103",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",K,[i("summary",null,[s[214]||(s[214]=i("a",{id:"GeometryOps.PROJ",href:"#GeometryOps.PROJ"},[i("span",{class:"jlbinding"},"GeometryOps.PROJ")],-1)),s[215]||(s[215]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[217]||(s[217]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PROJ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A struct which instructs the method it&#39;s passed to as an algorithm to use the appropriate PROJ function via <code>Proj.jl</code> for the operation.</p><p><strong>Extended help</strong></p><p>This is the default algorithm for <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.reproject"><code>reproject</code></a>, and will also be the default algorithm for operations on geodesics like <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.area"><code>area</code></a> and <code>arclength</code>.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[216]||(s[216]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/types.jl#L152-L162",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",X,[i("summary",null,[s[218]||(s[218]=i("a",{id:"GeometryOps.PointOrientation",href:"#GeometryOps.PointOrientation"},[i("span",{class:"jlbinding"},"GeometryOps.PointOrientation")],-1)),s[219]||(s[219]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[221]||(s[221]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Enum PointOrientation</span></span></code></pre></div><p>Enum for the orientation of a point with respect to a curve. A point can be <code>point_in</code> the curve, <code>point_on</code> the curve, or <code>point_out</code> of the curve.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[220]||(s[220]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/geom_geom_processors.jl#L7-L12",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Y,[i("summary",null,[s[222]||(s[222]=i("a",{id:"GeometryOps.RadialDistance",href:"#GeometryOps.RadialDistance"},[i("span",{class:"jlbinding"},"GeometryOps.RadialDistance")],-1)),s[223]||(s[223]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[225]||(s[225]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RadialDistance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SimplifyAlg</span></span></code></pre></div><p>Simplifies geometries by removing points less than <code>tol</code> distance from the line between its neighboring points.</p><p><strong>Keywords</strong></p><ul><li><p><code>ratio</code>: the fraction of points that should remain after <code>simplify</code>. Useful as it will generalise for large collections of objects.</p></li><li><p><code>number</code>: the number of points that should remain after <code>simplify</code>. Less useful for large collections of mixed size objects.</p></li><li><p><code>tol</code>: the minimum distance between points.</p></li></ul><p>Note: user input <code>tol</code> is squared to avoid unnecessary computation in algorithm.</p>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[224]||(s[224]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/simplify.jl#L209-L219",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",$,[i("summary",null,[s[226]||(s[226]=i("a",{id:"GeometryOps.SimplifyAlg",href:"#GeometryOps.SimplifyAlg"},[i("span",{class:"jlbinding"},"GeometryOps.SimplifyAlg")],-1)),s[227]||(s[227]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[229]||(s[229]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimplifyAlg</span></span></code></pre></div><p>Abstract type for simplification algorithms.</p><p><strong>API</strong></p><p>For now, the algorithm must hold the <code>number</code>, <code>ratio</code> and <code>tol</code> properties.</p><p>Simplification algorithm types can hook into the interface by implementing the <code>_simplify(trait, alg, geom)</code> methods for whichever traits are necessary.</p>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[228]||(s[228]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/simplify.jl#L85-L96",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ss,[i("summary",null,[s[230]||(s[230]=i("a",{id:"GeometryOps.TG",href:"#GeometryOps.TG"},[i("span",{class:"jlbinding"},"GeometryOps.TG")],-1)),s[231]||(s[231]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[233]||(s[233]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A struct which instructs the method it&#39;s passed to as an algorithm to use the appropriate TG function via <code>TGGeometry.jl</code> for the operation.</p><p>It&#39;s generally a lot faster than the native Julia implementations, but only supports planar manifolds / operations. Also, it only supports geometric predicates, specifically the ones which the underlying <code>tg</code> library supports. These are:</p><p><a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.equals"><code>equals</code></a>, <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.intersects"><code>intersects</code></a>, <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.disjoint"><code>disjoint</code></a>, <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.contains"><code>contains</code></a>, <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.within"><code>within</code></a>, <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.covers"><code>covers</code></a>, <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.coveredby"><code>coveredby</code></a>, and <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.touches"><code>touches</code></a>.</p><p><strong>Extended help</strong></p><p>This uses the <a href="https://github.com/JuliaGeo/TGGeometry.jl" target="_blank" rel="noreferrer">TGGeometry.jl</a> package, which is a Julia wrapper around the <code>tg</code> C library (<a href="https://github.com/tidwall/tg" target="_blank" rel="noreferrer">https://github.com/tidwall/tg</a>).</p>',6)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[232]||(s[232]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/types.jl#L128-L145",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",is,[i("summary",null,[s[234]||(s[234]=i("a",{id:"GeometryOps.TracingError",href:"#GeometryOps.TracingError"},[i("span",{class:"jlbinding"},"GeometryOps.TracingError")],-1)),s[235]||(s[235]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[237]||(s[237]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TracingError{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span></span></code></pre></div><p>An error that is thrown when the clipping tracing algorithm fails somehow. This is a bug in the algorithm, and should be reported.</p><p>The polygons are contained in the exception object, accessible by try-catch or as <code>err</code> in the REPL.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[236]||(s[236]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/clipping_processor.jl#L105-L112",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",es,[i("summary",null,[s[238]||(s[238]=i("a",{id:"GeometryOps.UnionIntersectingPolygons",href:"#GeometryOps.UnionIntersectingPolygons"},[i("span",{class:"jlbinding"},"GeometryOps.UnionIntersectingPolygons")],-1)),s[239]||(s[239]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[241]||(s[241]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnionIntersectingPolygons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeometryCorrection</span></span></code></pre></div><p>This correction ensures that the polygon&#39;s included in a multipolygon aren&#39;t intersecting. If any polygon&#39;s are intersecting, they will be combined through the union operation to create a unique set of disjoint (other than potentially connections by a single point) polygons covering the same area.</p><p>See also <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.GeometryCorrection"><code>GeometryCorrection</code></a>.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[240]||(s[240]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/correction/intersecting_polygons.jl#L47-L56",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",as,[i("summary",null,[s[242]||(s[242]=i("a",{id:"GeometryOps.VisvalingamWhyatt",href:"#GeometryOps.VisvalingamWhyatt"},[i("span",{class:"jlbinding"},"GeometryOps.VisvalingamWhyatt")],-1)),s[243]||(s[243]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[245]||(s[245]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VisvalingamWhyatt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SimplifyAlg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VisvalingamWhyatt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Simplifies geometries by removing points below <code>tol</code> distance from the line between its neighboring points.</p><p><strong>Keywords</strong></p><ul><li><p><code>ratio</code>: the fraction of points that should remain after <code>simplify</code>. Useful as it will generalise for large collections of objects.</p></li><li><p><code>number</code>: the number of points that should remain after <code>simplify</code>. Less useful for large collections of mixed size objects.</p></li><li><p><code>tol</code>: the minimum area of a triangle made with a point and its neighboring points.</p></li></ul><p>Note: user input <code>tol</code> is doubled to avoid unnecessary computation in algorithm.</p>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[244]||(s[244]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/simplify.jl#L384-L396",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ts,[i("summary",null,[s[246]||(s[246]=i("a",{id:"GeometryOps._det-Union{Tuple{T2}, Tuple{T1}, Tuple{Union{Tuple{T1, T1}, StaticArraysCore.StaticArray{Tuple{2}, T1, 1}}, Union{Tuple{T2, T2}, StaticArraysCore.StaticArray{Tuple{2}, T2, 1}}}} where {T1<:Real, T2<:Real}",href:"#GeometryOps._det-Union{Tuple{T2}, Tuple{T1}, Tuple{Union{Tuple{T1, T1}, StaticArraysCore.StaticArray{Tuple{2}, T1, 1}}, Union{Tuple{T2, T2}, StaticArraysCore.StaticArray{Tuple{2}, T2, 1}}}} where {T1<:Real, T2<:Real}"},[i("span",{class:"jlbinding"},"GeometryOps._det")],-1)),s[247]||(s[247]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[249]||(s[249]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_det</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Point2{T1}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Point2{T2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Returns the determinant of the matrix formed by <code>hcat</code>&#39;ing two points <code>s1</code> and <code>s2</code>.</p><p>Specifically, this is:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s1[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s1[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[248]||(s[248]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/barycentric.jl#L197-L206",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ns,[i("summary",null,[s[250]||(s[250]=i("a",{id:"GeometryOps._equals_curves-NTuple{4, Any}",href:"#GeometryOps._equals_curves-NTuple{4, Any}"},[i("span",{class:"jlbinding"},"GeometryOps._equals_curves")],-1)),s[251]||(s[251]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[253]||(s[253]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_equals_curves</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c1, c2, closed_type1, closed_type2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two curves are equal if they share the same set of point, representing the same geometry. Both curves must must be composed of the same set of points, however, they do not have to wind in the same direction, or start on the same point to be equivalent. Inputs: c1 first geometry c2 second geometry closed_type1::Bool true if c1 is closed by definition (polygon, linear ring) closed_type2::Bool true if c2 is closed by definition (polygon, linear ring)</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[252]||(s[252]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L144-L156",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ls,[i("summary",null,[s[254]||(s[254]=i("a",{id:"GeometryOps.angles-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.angles-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.angles")],-1)),s[255]||(s[255]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[257]||(s[257]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">angles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64)</span></span></code></pre></div><p>Returns the angles of a geometry or collection of geometries. This is computed differently for different geometries:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- The angles of a point is an empty vector.</span></span>
<span class="line"><span>- The angles of a single line segment is an empty vector.</span></span>
<span class="line"><span>- The angles of a linestring or linearring is a vector of angles formed by the curve.</span></span>
<span class="line"><span>- The angles of a polygon is a vector of vectors of angles formed by each ring.</span></span>
<span class="line"><span>- The angles of a multi-geometry collection is a vector of the angles of each of the</span></span>
<span class="line"><span>    sub-geometries as defined above.</span></span></code></pre></div><p>Result will be a Vector, or nested set of vectors, of type T where an optional argument with a default value of Float64.</p>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[256]||(s[256]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/angles.jl#L33-L48",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ps,[i("summary",null,[s[258]||(s[258]=i("a",{id:"GeometryOps.area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.area")],-1)),s[259]||(s[259]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[261]||(s[261]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Returns the area of a geometry or collection of geometries. This is computed slightly differently for different geometries:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- The area of a point/multipoint is always zero.</span></span>
<span class="line"><span>- The area of a curve/multicurve is always zero.</span></span>
<span class="line"><span>- The area of a polygon is the absolute value of the signed area.</span></span>
<span class="line"><span>- The area multi-polygon is the sum of the areas of all of the sub-polygons.</span></span>
<span class="line"><span>- The area of a geometry collection, feature collection of array/iterable </span></span>
<span class="line"><span>    is the sum of the areas of all of the sub-geometries.</span></span></code></pre></div><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[260]||(s[260]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/area.jl#L53-L68",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",os,[i("summary",null,[s[262]||(s[262]=i("a",{id:"GeometryOps.centroid-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T",href:"#GeometryOps.centroid-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"},[i("span",{class:"jlbinding"},"GeometryOps.centroid")],-1)),s[263]||(s[263]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[265]||(s[265]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{T, T}</span></span></code></pre></div><p>Returns the centroid of a given line segment, linear ring, polygon, or mutlipolygon.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[264]||(s[264]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/centroid.jl#L51-L56",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",hs,[i("summary",null,[s[266]||(s[266]=i("a",{id:"GeometryOps.centroid_and_area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T",href:"#GeometryOps.centroid_and_area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"},[i("span",{class:"jlbinding"},"GeometryOps.centroid_and_area")],-1)),s[267]||(s[267]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[269]||(s[269]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centroid_and_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(::Tuple{T, T}, ::Real)</span></span></code></pre></div><p>Returns the centroid and area of a given geometry.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[268]||(s[268]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/centroid.jl#L104-L108",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",rs,[i("summary",null,[s[270]||(s[270]=i("a",{id:"GeometryOps.centroid_and_length-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T",href:"#GeometryOps.centroid_and_length-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"},[i("span",{class:"jlbinding"},"GeometryOps.centroid_and_length")],-1)),s[271]||(s[271]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[273]||(s[273]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centroid_and_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(::Tuple{T, T}, ::Real)</span></span></code></pre></div><p>Returns the centroid and length of a given line/ring. Note this is only valid for line strings and linear rings.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[272]||(s[272]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/centroid.jl#L67-L72",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ks,[i("summary",null,[s[274]||(s[274]=i("a",{id:"GeometryOps.contains-Tuple{Any, Any}",href:"#GeometryOps.contains-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.contains")],-1)),s[275]||(s[275]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[277]||(s[277]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, g2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if the second geometry is completely contained by the first geometry. The interiors of both geometries must intersect and the interior and boundary of the secondary (g2) must not intersect the exterior of the first (g1).</p><p><code>contains</code> returns the exact opposite result of <code>within</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line, point)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[276]||(s[276]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/contains.jl#L43-L64",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ds,[i("summary",null,[s[278]||(s[278]=i("a",{id:"GeometryOps.contains-Tuple{Any}",href:"#GeometryOps.contains-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.contains")],-1)),s[279]||(s[279]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[281]||(s[281]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input contains <code>g1</code>. This is equivalent to <code>x -&gt; contains(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[280]||(s[280]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/contains.jl#L67-L72",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",gs,[i("summary",null,[s[282]||(s[282]=i("a",{id:"GeometryOps.convex_hull",href:"#GeometryOps.convex_hull"},[i("span",{class:"jlbinding"},"GeometryOps.convex_hull")],-1)),s[283]||(s[283]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[285]||(s[285]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convex_hull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([method], geometries)</span></span></code></pre></div><p>Compute the convex hull of the points in <code>geometries</code>. Returns a <code>GI.Polygon</code> representing the convex hull.</p><p>Note that the polygon returned is wound counterclockwise as in the Simple Features standard by default. If you choose GEOS, the winding order will be inverted.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This interface only computes the 2-dimensional convex hull!</p><p>For higher dimensional hulls, use the relevant package (Qhull.jl, Quickhull.jl, or similar).</p></div>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[284]||(s[284]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/convex_hull.jl#L77-L91",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ys,[i("summary",null,[s[286]||(s[286]=i("a",{id:"GeometryOps.coverage-Union{Tuple{T}, NTuple{5, Any}, Tuple{Any, Any, Any, Any, Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.coverage-Union{Tuple{T}, NTuple{5, Any}, Tuple{Any, Any, Any, Any, Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.coverage")],-1)),s[287]||(s[287]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[289]||(s[289]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coverage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, xmin, xmax, ymin, ymax, [T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Returns the area of intersection between given geometry and grid cell defined by its minimum and maximum x and y-values. This is computed differently for different geometries:</p><ul><li><p>The signed area of a point is always zero.</p></li><li><p>The signed area of a curve is always zero.</p></li><li><p>The signed area of a polygon is calculated by tracing along its edges and switching to the cell edges if needed.</p></li><li><p>The coverage of a geometry collection, multi-geometry, feature collection of array/iterable is the sum of the coverages of all of the sub-geometries.</p></li></ul><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[288]||(s[288]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/coverage.jl#L45-L60",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",cs,[i("summary",null,[s[290]||(s[290]=i("a",{id:"GeometryOps.coveredby-Tuple{Any, Any}",href:"#GeometryOps.coveredby-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.coveredby")],-1)),s[291]||(s[291]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[293]||(s[293]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coveredby</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1, g2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the first geometry is completely covered by the second geometry. The interior and boundary of the primary geometry (g1) must not intersect the exterior of the secondary geometry (g2).</p><p>Furthermore, <code>coveredby</code> returns the exact opposite result of <code>covers</code>. They are equivalent with the order of the arguments swapped.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([p1, p2])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coveredby</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p1, l1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[292]||(s[292]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/coveredby.jl#L58-L79",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Es,[i("summary",null,[s[294]||(s[294]=i("a",{id:"GeometryOps.coveredby-Tuple{Any}",href:"#GeometryOps.coveredby-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.coveredby")],-1)),s[295]||(s[295]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[297]||(s[297]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coveredby</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input is covered by <code>g1</code>. This is equivalent to <code>x -&gt; coveredby(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[296]||(s[296]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/coveredby.jl#L82-L87",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",us,[i("summary",null,[s[298]||(s[298]=i("a",{id:"GeometryOps.covers-Tuple{Any, Any}",href:"#GeometryOps.covers-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.covers")],-1)),s[299]||(s[299]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[301]||(s[301]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">covers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, g2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if the first geometry is completely covers the second geometry, The exterior and boundary of the second geometry must not be outside of the interior and boundary of the first geometry. However, the interiors need not intersect.</p><p><code>covers</code> returns the exact opposite result of <code>coveredby</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">covers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l1, l2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[300]||(s[300]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/covers.jl#L42-L63",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ms,[i("summary",null,[s[302]||(s[302]=i("a",{id:"GeometryOps.covers-Tuple{Any}",href:"#GeometryOps.covers-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.covers")],-1)),s[303]||(s[303]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[305]||(s[305]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">covers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input covers <code>g1</code>. This is equivalent to <code>x -&gt; covers(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[304]||(s[304]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/covers.jl#L66-L71",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ts,[i("summary",null,[s[306]||(s[306]=i("a",{id:"GeometryOps.crosses-Tuple{Any, Any}",href:"#GeometryOps.crosses-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.crosses")],-1)),s[307]||(s[307]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[309]||(s[309]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crosses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the intersection results in a geometry whose dimension is one less than the maximum dimension of the two source geometries and the intersection set is interior to both source geometries.</p><p>TODO: broken</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TODO</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: Add working example</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[308]||(s[308]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/crosses.jl#L3-L17",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Cs,[i("summary",null,[s[310]||(s[310]=i("a",{id:"GeometryOps.crosses-Tuple{Any}",href:"#GeometryOps.crosses-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.crosses")],-1)),s[311]||(s[311]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[313]||(s[313]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">crosses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input crosses <code>g1</code>. This is equivalent to <code>x -&gt; crosses(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[312]||(s[312]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/crosses.jl#L29-L34",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",fs,[i("summary",null,[s[314]||(s[314]=i("a",{id:"GeometryOps.cut-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.cut-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.cut")],-1)),s[315]||(s[315]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[317]||(s[317]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, line, [T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Return given geom cut by given line as a list of geometries of the same type as the input geom. Return the original geometry as only list element if none are found. Line must cut fully through given geometry or the original geometry will be returned.</p><p>Note: This currently doesn&#39;t work for degenerate cases there line crosses through vertices.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cut_polys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly, line)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(cut_polys)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element Vector{Vector{Vector{Vector{Float64}}}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]]</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[316]||(s[316]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/cut.jl#L36-L60",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Fs,[i("summary",null,[s[318]||(s[318]=i("a",{id:"GeometryOps.difference-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.difference-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.difference")],-1)),s[319]||(s[319]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[321]||(s[321]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">difference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom_a, geom_b, [T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fix_multipoly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UnionIntersectingPolygons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Return the difference between two geometries as a list of geometries. Return an empty list if none are found. The type of the list will be constrained as much as possible given the input geometries. Furthermore, the user can provide a <code>taget</code> type as a keyword argument and a list of target geometries found in the difference will be returned. The user can also provide a float type that they would like the points of returned geometries to be. If the user is taking a intersection involving one or more multipolygons, and the multipolygon might be comprised of polygons that intersect, if <code>fix_multipoly</code> is set to an <code>IntersectingPolygons</code> correction (the default is <code>UnionIntersectingPolygons()</code>), then the needed multipolygons will be fixed to be valid before performing the intersection to ensure a correct answer. Only set <code>fix_multipoly</code> to false if you know that the multipolygons are valid, as it will avoid unneeded computation.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diff_poly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">difference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly1, poly2; target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(diff_poly)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element Vector{Vector{Vector{Vector{Float64}}}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]]</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[320]||(s[320]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/difference.jl#L5-L34",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",bs,[i("summary",null,[s[322]||(s[322]=i("a",{id:"GeometryOps.disjoint-Tuple{Any, Any}",href:"#GeometryOps.disjoint-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.disjoint")],-1)),s[323]||(s[323]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[325]||(s[325]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disjoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the first geometry is disjoint from the second geometry.</p><p>Return <code>true</code> if the first geometry is disjoint from the second geometry. The interiors and boundaries of both geometries must not intersect.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disjoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point, line)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[324]||(s[324]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/disjoint.jl#L56-L75",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",As,[i("summary",null,[s[326]||(s[326]=i("a",{id:"GeometryOps.disjoint-Tuple{Any}",href:"#GeometryOps.disjoint-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.disjoint")],-1)),s[327]||(s[327]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[329]||(s[329]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disjoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input is disjoint from <code>g1</code>. This is equivalent to <code>x -&gt; disjoint(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[328]||(s[328]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/disjoint.jl#L78-L83",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_s,[i("summary",null,[s[330]||(s[330]=i("a",{id:"GeometryOps.distance-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.distance-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.distance")],-1)),s[331]||(s[331]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[333]||(s[333]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point, geom, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Calculates the ditance from the geometry <code>g1</code> to the <code>point</code>. The distance will always be positive or zero.</p><p>The method will differ based on the type of the geometry provided: - The distance from a point to a point is just the Euclidean distance between the points. - The distance from a point to a line is the minimum distance from the point to the closest point on the given line. - The distance from a point to a linestring is the minimum distance from the point to the closest segment of the linestring. - The distance from a point to a linear ring is the minimum distance from the point to the closest segment of the linear ring. - The distance from a point to a polygon is zero if the point is within the polygon and otherwise is the minimum distance from the point to an edge of the polygon. This includes edges created by holes. - The distance from a point to a multigeometry or a geometry collection is the minimum distance between the point and any of the sub-geometries.</p><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[332]||(s[332]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/distance.jl#L67-L90",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Gs,[i("summary",null,[s[334]||(s[334]=i("a",{id:"GeometryOps.eachedge-Tuple{Any}",href:"#GeometryOps.eachedge-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.eachedge")],-1)),s[335]||(s[335]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[337]||(s[337]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eachedge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Decompose a geometry into a list of edges. Currently only works for LineString and LinearRing.</p><p>Returns some iterator, which yields tuples of points. Each tuple is an edge.</p><p>It goes <code>(p1, p2), (p2, p3), (p3, p4), ...</code> etc.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[336]||(s[336]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L158-L167",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",js,[i("summary",null,[s[338]||(s[338]=i("a",{id:"GeometryOps.edge_extents-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T",href:"#GeometryOps.edge_extents-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"},[i("span",{class:"jlbinding"},"GeometryOps.edge_extents")],-1)),s[339]||(s[339]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[341]||(s[341]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">edge_extents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Return a vector of the extents of the edges (line segments) of <code>geom</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[340]||(s[340]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L233-L237",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",vs,[i("summary",null,[s[342]||(s[342]=i("a",{id:"GeometryOps.embed_extent-Tuple{Any}",href:"#GeometryOps.embed_extent-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.embed_extent")],-1)),s[343]||(s[343]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[345]||(s[345]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">embed_extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span></code></pre></div><p>Recursively wrap the object with a GeoInterface.jl geometry, calculating and adding an <code>Extents.Extent</code> to all objects.</p><p>This can improve performance when extents need to be checked multiple times, such when needing to check if many points are in geometries, and using their extents as a quick filter for obviously exterior points.</p><p><strong>Keywords</strong></p><ul><li><p><code>threaded</code>: <code>true</code> or <code>false</code>. Whether to use multithreading. Defaults to <code>false</code>.</p></li><li><p><code>crs</code>: The CRS to attach to geometries. Defaults to <code>nothing</code>.</p></li></ul>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[344]||(s[344]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/extent.jl#L3-L17",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Os,[i("summary",null,[s[346]||(s[346]=i("a",{id:"GeometryOps.enforce-Tuple{GeometryOps.CLibraryPlanarAlgorithm, Symbol, Any}",href:"#GeometryOps.enforce-Tuple{GeometryOps.CLibraryPlanarAlgorithm, Symbol, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.enforce")],-1)),s[347]||(s[347]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[349]||(s[349]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">enforce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CLibraryPlanarAlgorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f)</span></span></code></pre></div><p>Enforce the presence of a keyword argument in a <code>GEOS</code> algorithm, and return <code>alg.params[kw]</code>.</p><p>Throws an error if the key is not present, and mentions <code>f</code> in the error message (since there isn&#39;t a good way to get the name of the function that called this method).</p><p>This applies to all <code>CLibraryPlanarAlgorithm</code> types, like <a href="/GeometryOps.jl/previews/PR339/source/types#GEOS"><code>GEOS</code></a> and <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.TG"><code>TG</code></a>.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[348]||(s[348]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/types.jl#L84-L93",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Bs,[i("summary",null,[s[350]||(s[350]=i("a",{id:"GeometryOps.equals-NTuple{4, Any}",href:"#GeometryOps.equals-NTuple{4, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[351]||(s[351]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[353]||(s[353]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(trait_a, geom_a, trait_b, geom_b)</span></span></code></pre></div><p>Two geometries which are not of the same type cannot be equal so they always return false.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[352]||(s[352]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L81-L86",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ds,[i("summary",null,[s[354]||(s[354]=i("a",{id:"GeometryOps.equals-Tuple{Any, Any}",href:"#GeometryOps.equals-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[355]||(s[355]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[357]||(s[357]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Compare two Geometries return true if they are the same geometry.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly1, poly2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[356]||(s[356]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L52-L67",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",xs,[i("summary",null,[s[358]||(s[358]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.LinearRingTrait, Any, GeoInterface.LinearRingTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.LinearRingTrait, Any, GeoInterface.LinearRingTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[359]||(s[359]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[361]||(s[361]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two linear rings are equal if they share the same set of points going along the curve. Note that rings are closed by definition, so they can have, but don&#39;t need, a repeated last point to be equal.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[360]||(s[360]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L250-L259",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Is,[i("summary",null,[s[362]||(s[362]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.LinearRingTrait, Any, Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.LinearRingTrait, Any, Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[363]||(s[363]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[365]||(s[365]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineTrait, GI.LineStringTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A linear ring and a line/linestring are equal if they share the same set of points going along the curve. Note that lines aren&#39;t closed by definition, but rings are, so the line must have a repeated last point to be equal</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[364]||(s[364]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L235-L244",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ss,[i("summary",null,[s[366]||(s[366]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.MultiPointTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.MultiPointTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[367]||(s[367]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[369]||(s[369]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two multipoints are equal if they share the same set of points.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[368]||(s[368]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L124-L128",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ws,[i("summary",null,[s[370]||(s[370]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.PointTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.PointTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[371]||(s[371]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[373]||(s[373]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A point and a multipoint are equal if the multipoint is composed of a single point that is equivalent to the given point.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[372]||(s[372]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L115-L120",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ps,[i("summary",null,[s[374]||(s[374]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[375]||(s[375]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[377]||(s[377]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two multipolygons are equal if they share the same set of polygons.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[376]||(s[376]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L315-L319",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Qs,[i("summary",null,[s[378]||(s[378]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.PolygonTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.PolygonTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[379]||(s[379]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[381]||(s[381]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A polygon and a multipolygon are equal if the multipolygon is composed of a single polygon that is equivalent to the given polygon.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[380]||(s[380]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L306-L311",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ls,[i("summary",null,[s[382]||(s[382]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.PointTrait, Any, GeoInterface.MultiPointTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.PointTrait, Any, GeoInterface.MultiPointTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[383]||(s[383]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[385]||(s[385]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A point and a multipoint are equal if the multipoint is composed of a single point that is equivalent to the given point.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[384]||(s[384]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L104-L109",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Vs,[i("summary",null,[s[386]||(s[386]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.PointTrait, Any, GeoInterface.PointTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.PointTrait, Any, GeoInterface.PointTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[387]||(s[387]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[389]||(s[389]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two points are the same if they have the same x and y (and z if 3D) coordinates.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[388]||(s[388]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L89-L93",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Rs,[i("summary",null,[s[390]||(s[390]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[391]||(s[391]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[393]||(s[393]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A polygon and a multipolygon are equal if the multipolygon is composed of a single polygon that is equivalent to the given polygon.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[392]||(s[392]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L295-L300",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ms,[i("summary",null,[s[394]||(s[394]=i("a",{id:"GeometryOps.equals-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.PolygonTrait, Any}",href:"#GeometryOps.equals-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.PolygonTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[395]||(s[395]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[397]||(s[397]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two polygons are equal if they share the same exterior edge and holes.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[396]||(s[396]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L265-L269",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ns,[i("summary",null,[s[398]||(s[398]=i("a",{id:"GeometryOps.equals-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any, GeoInterface.LinearRingTrait, Any}",href:"#GeometryOps.equals-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any, GeoInterface.LinearRingTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[399]||(s[399]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[401]||(s[401]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineTrait, GI.LineStringTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>A line/linestring and a linear ring are equal if they share the same set of points going along the curve. Note that lines aren&#39;t closed by definition, but rings are, so the line must have a repeated last point to be equal</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[400]||(s[400]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L220-L229",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",qs,[i("summary",null,[s[402]||(s[402]=i("a",{id:"GeometryOps.equals-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any, Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any}",href:"#GeometryOps.equals-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any, Union{GeoInterface.LineStringTrait, GeoInterface.LineTrait}, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[403]||(s[403]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[405]||(s[405]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineTrait, GI.LineStringTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineTrait, GI.LineStringTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two lines/linestrings are equal if they share the same set of points going along the curve. Note that lines/linestrings aren&#39;t closed by definition.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[404]||(s[404]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L206-L214",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Js,[i("summary",null,[s[406]||(s[406]=i("a",{id:"GeometryOps.equals-Union{Tuple{T}, Tuple{T, Any, T, Any}} where T",href:"#GeometryOps.equals-Union{Tuple{T}, Tuple{T, Any, T, Any}} where T"},[i("span",{class:"jlbinding"},"GeometryOps.equals")],-1)),s[407]||(s[407]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[409]||(s[409]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom_b)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Two geometries of the same type, which don&#39;t have a equals function to dispatch off of should throw an error.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[408]||(s[408]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/equals.jl#L73-L78",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Hs,[i("summary",null,[s[410]||(s[410]=i("a",{id:"GeometryOps.extent_to_polygon-Tuple{Extents.Extent{:X, :Y}}",href:"#GeometryOps.extent_to_polygon-Tuple{Extents.Extent{:X, :Y}}"},[i("span",{class:"jlbinding"},"GeometryOps.extent_to_polygon")],-1)),s[411]||(s[411]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[413]||(s[413]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">extent_to_polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Extents.Extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Convert an extent to a polygon.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, Extents</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Extents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">extent_to_polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ext)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon{false, false}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">…</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">…</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])])</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[412]||(s[412]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L261-L276",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Us,[i("summary",null,[s[414]||(s[414]=i("a",{id:"GeometryOps.flip-Tuple{Any}",href:"#GeometryOps.flip-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.flip")],-1)),s[415]||(s[415]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[417]||(s[417]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span></code></pre></div><p>Swap all of the x and y coordinates in obj, otherwise keeping the original structure (but not necessarily the original type).</p><p><strong>Keywords</strong></p><ul><li><p><code>threaded</code>: <code>true</code> or <code>false</code>. Whether to use multithreading. Defaults to <code>false</code>.</p></li><li><p><code>crs</code>: The CRS to attach to geometries. Defaults to <code>nothing</code>.</p></li><li><p><code>calc_extent</code>: <code>true</code> or <code>false</code>. Whether to calculate the extent. Defaults to <code>false</code>.</p></li></ul>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[416]||(s[416]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/flip.jl#L6-L16",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ws,[i("summary",null,[s[418]||(s[418]=i("a",{id:"GeometryOps.forcexy-Tuple{Any}",href:"#GeometryOps.forcexy-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.forcexy")],-1)),s[419]||(s[419]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[421]||(s[421]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forcexy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom)</span></span></code></pre></div><p>Force the geometry to be 2D. Works on any geometry, vector of geometries, feature collection, or table!</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[420]||(s[420]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/forcedims.jl#L11-L15",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",zs,[i("summary",null,[s[422]||(s[422]=i("a",{id:"GeometryOps.forcexyz",href:"#GeometryOps.forcexyz"},[i("span",{class:"jlbinding"},"GeometryOps.forcexyz")],-1)),s[423]||(s[423]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[425]||(s[425]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">forcexyz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Force the geometry to be 3D. Works on any geometry, vector of geometries, feature collection, or table!</p><p>The <code>z</code> parameter is the default z value - if a point has no z value, it will be set to this value. If it does, then the z value will be kept.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[424]||(s[424]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/forcedims.jl#L18-L25",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Zs,[i("summary",null,[s[426]||(s[426]=i("a",{id:"GeometryOps.foreach_pair_of_maybe_intersecting_edges_in_order-Union{Tuple{M}, Tuple{T}, Tuple{FI}, Tuple{FAAfter}, Tuple{FA}, Tuple{M, GeometryOps.AutoAccelerator, FA, FAAfter, FI, Any, Any}, Tuple{M, GeometryOps.AutoAccelerator, FA, FAAfter, FI, Any, Any, Type{T}}} where {FA, FAAfter, FI, T, M<:Manifold}",href:"#GeometryOps.foreach_pair_of_maybe_intersecting_edges_in_order-Union{Tuple{M}, Tuple{T}, Tuple{FI}, Tuple{FAAfter}, Tuple{FA}, Tuple{M, GeometryOps.AutoAccelerator, FA, FAAfter, FI, Any, Any}, Tuple{M, GeometryOps.AutoAccelerator, FA, FAAfter, FI, Any, Any, Type{T}}} where {FA, FAAfter, FI, T, M<:Manifold}"},[i("span",{class:"jlbinding"},"GeometryOps.foreach_pair_of_maybe_intersecting_edges_in_order")],-1)),s[427]||(s[427]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[429]||(s[429]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foreach_pair_of_maybe_intersecting_edges_in_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    manifold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, accelerator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f_on_each_a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f_after_each_a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FAAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f_on_each_maybe_intersect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    geom_a,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    geom_b,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {FA, FAAfter, FI, T, M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Manifold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IntersectionAccelerator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Decompose <code>geom_a</code> and <code>geom_b</code> into edge lists (unsorted), and then, logically, perform the following iteration:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a_edge, i) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eachedge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom_a))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    f_on_each_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a_edge, i)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b_edge, j) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eachedge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom_b))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> may_intersect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a_edge, b_edge)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            f_on_each_maybe_intersect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a_edge, b_edge)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    f_after_each_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a_edge, i)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>This may not be the exact acceleration that is performed - but it is the logical sequence of events. It also uses the <code>accelerator</code>, and can automatically choose the best one based on an internal heuristic if you pass in an <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.AutoAccelerator"><code>AutoAccelerator</code></a>.</p><p>For example, the <code>SingleSTRtree</code> accelerator is used along with extent thinning to avoid unnecessary edge intersection checks in the inner loop.</p>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[428]||(s[428]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/clipping_processor.jl#L178-L213",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ks,[i("summary",null,[s[430]||(s[430]=i("a",{id:"GeometryOps.intersection-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.intersection-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.intersection")],-1)),s[431]||(s[431]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[433]||(s[433]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom_a, geom_b, [T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fix_multipoly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UnionIntersectingPolygons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Return the intersection between two geometries as a list of geometries. Return an empty list if none are found. The type of the list will be constrained as much as possible given the input geometries. Furthermore, the user can provide a <code>target</code> type as a keyword argument and a list of target geometries found in the intersection will be returned. The user can also provide a float type that they would like the points of returned geometries to be. If the user is taking a intersection involving one or more multipolygons, and the multipolygon might be comprised of polygons that intersect, if <code>fix_multipoly</code> is set to an <code>IntersectingPolygons</code> correction (the default is <code>UnionIntersectingPolygons()</code>), then the needed multipolygons will be fixed to be valid before performing the intersection to ensure a correct answer. Only set <code>fix_multipoly</code> to nothing if you know that the multipolygons are valid, as it will avoid unneeded computation.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">124.584961</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12.768946</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">126.738281</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17.224758</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123.354492</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15.961329</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.22168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14.008696</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inter_points </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line1, line2; target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(inter_points)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element Vector{Vector{Float64}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">125.58375366067548</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14.83572303404496</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[432]||(s[432]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/intersection.jl#L12-L41",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Xs,[i("summary",null,[s[434]||(s[434]=i("a",{id:"GeometryOps.intersection_points-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.intersection_points-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.intersection_points")],-1)),s[435]||(s[435]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[437]||(s[437]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersection_points</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom_a, geom_b, [T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Return a list of intersection tuple points between two geometries. If no intersection points exist, returns an empty list.</p><p><strong>Example</strong></p><div class="language-jldoctest vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jldoctest</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>line1 = GI.Line([(124.584961,-12.768946), (126.738281,-17.224758)]) line2 = GI.Line([(123.354492,-15.961329), (127.22168,-14.008696)]) inter_points = GO.intersection_points(line1, line2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**output**</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1-element Vector{Tuple{Float64, Float64}}:  (125.58375366067548, -14.83572303404496)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;Badge type=&quot;info&quot; class=&quot;source-link&quot; text=&quot;source&quot;&gt;&lt;a href=&quot;https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/intersection.jl#L202-L220&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;source&lt;/a&gt;&lt;/Badge&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/details&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;details class=&#39;jldocstring custom-block&#39; open&gt;</span></span>
<span class="line"><span>&lt;summary&gt;&lt;a id=&#39;GeometryOps.intersects-Tuple{Any, Any}&#39; href=&#39;#GeometryOps.intersects-Tuple{Any, Any}&#39;&gt;&lt;span class=&quot;jlbinding&quot;&gt;GeometryOps.intersects&lt;/span&gt;&lt;/a&gt; &lt;Badge type=&quot;info&quot; class=&quot;jlObjectType jlMethod&quot; text=&quot;Method&quot; /&gt;&lt;/summary&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`julia</span></span>
<span class="line"><span>intersects(geom1, geom2)::Bool</span></span></code></pre></div><p>Return true if the interiors or boundaries of the two geometries interact.</p><p><code>intersects</code> returns the exact opposite result of <code>disjoint</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">124.584961</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12.768946</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">126.738281</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17.224758</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123.354492</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15.961329</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.22168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14.008696</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line1, line2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,8)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[436]||(s[436]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/intersects.jl#L38-L57",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ys,[i("summary",null,[s[438]||(s[438]=i("a",{id:"GeometryOps.intersects-Tuple{Any}",href:"#GeometryOps.intersects-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.intersects")],-1)),s[439]||(s[439]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[441]||(s[441]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input intersects <code>g1</code>. This is equivalent to <code>x -&gt; intersects(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[440]||(s[440]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/intersects.jl#L60-L65",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",$s,[i("summary",null,[s[442]||(s[442]=i("a",{id:"GeometryOps.isclockwise-Tuple{Any}",href:"#GeometryOps.isclockwise-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.isclockwise")],-1)),s[443]||(s[443]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[447]||(s[447]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isclockwise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{LineString, Vector{Position}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Take a ring and return <code>true</code> if the line goes clockwise, or <code>false</code> if the line goes counter-clockwise. &quot;Going clockwise&quot; means, mathematically,</p>',2)),i("mjx-container",si,[(o(),p("svg",ii,[...s[444]||(s[444]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z" style="stroke-width:3;"></path></g><g data-mml-node="munderover" transform="translate(792,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(2236,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(2625,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(3746.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(4746.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(6549,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(7160.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(7660.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(8049.5,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(9088.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(10088.9,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(11809.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(12198.5,0) translate(0 -0.5)"><path data-c="29" d="M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(13268.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(14324.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g></g>',1)])])),s[445]||(s[445]=i("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[i("mrow",{"data-mjx-texclass":"INNER"},[i("mo",{"data-mjx-texclass":"OPEN"},"("),i("munderover",null,[i("mo",{"data-mjx-texclass":"OP"},"∑"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mi",null,"i"),i("mo",null,"="),i("mn",null,"2")]),i("mi",null,"n")]),i("mo",{stretchy:"false"},"("),i("msub",null,[i("mi",null,"x"),i("mi",null,"i")]),i("mo",null,"−"),i("msub",null,[i("mi",null,"x"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mi",null,"i"),i("mo",null,"−"),i("mn",null,"1")])]),i("mo",{stretchy:"false"},")"),i("mo",null,"⋅"),i("mo",{stretchy:"false"},"("),i("msub",null,[i("mi",null,"y"),i("mi",null,"i")]),i("mo",null,"+"),i("msub",null,[i("mi",null,"y"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mi",null,"i"),i("mo",null,"−"),i("mn",null,"1")])]),i("mo",{stretchy:"false"},")"),i("mo",{"data-mjx-texclass":"CLOSE"},")")]),i("mo",null,">"),i("mn",null,"0")])],-1))]),s[448]||(s[448]=t(`<p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ring </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isclockwise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ring)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[446]||(s[446]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/orientation.jl#L19-L38",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ei,[i("summary",null,[s[449]||(s[449]=i("a",{id:"GeometryOps.isconcave-Tuple{Any}",href:"#GeometryOps.isconcave-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.isconcave")],-1)),s[450]||(s[450]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[452]||(s[452]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isconcave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Take a polygon and return true or false as to whether it is concave or not.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isconcave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[451]||(s[451]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/orientation.jl#L53-L68",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ai,[i("summary",null,[s[453]||(s[453]=i("a",{id:"GeometryOps.lazy_edge_extents-Tuple{Any}",href:"#GeometryOps.lazy_edge_extents-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.lazy_edge_extents")],-1)),s[454]||(s[454]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[456]||(s[456]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lazy_edge_extents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom)</span></span></code></pre></div><p>Return an iterator over the extents of the edges (line segments) of <code>geom</code>. This is lazy but nonallocating.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[455]||(s[455]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L245-L250",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ti,[i("summary",null,[s[457]||(s[457]=i("a",{id:"GeometryOps.lazy_edgelist-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T",href:"#GeometryOps.lazy_edgelist-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"},[i("span",{class:"jlbinding"},"GeometryOps.lazy_edgelist")],-1)),s[458]||(s[458]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[460]||(s[460]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lazy_edgelist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><p>Return an iterator over <code>GI.Line</code> objects with attached extents.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[459]||(s[459]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L224-L228",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ni,[i("summary",null,[s[461]||(s[461]=i("a",{id:"GeometryOps.overlaps-Tuple{Any, Any}",href:"#GeometryOps.overlaps-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[462]||(s[462]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[464]||(s[464]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Compare two Geometries of the same dimension and return true if their intersection set results in a geometry different from both but of the same dimension. This means one geometry cannot be within or contain the other and they cannot be equal</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly1, poly2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[463]||(s[463]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L53-L71",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",li,[i("summary",null,[s[465]||(s[465]=i("a",{id:"GeometryOps.overlaps-Tuple{Any}",href:"#GeometryOps.overlaps-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[466]||(s[466]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[468]||(s[468]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input overlaps <code>g1</code>. This is equivalent to <code>x -&gt; overlaps(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[467]||(s[467]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L79-L84",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",pi,[i("summary",null,[s[469]||(s[469]=i("a",{id:"GeometryOps.overlaps-Tuple{GeoInterface.AbstractTrait, Any, GeoInterface.AbstractTrait, Any}",href:"#GeometryOps.overlaps-Tuple{GeoInterface.AbstractTrait, Any, GeoInterface.AbstractTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[470]||(s[470]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[472]||(s[472]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.AbstractTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.AbstractTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>For any non-specified pair, all have non-matching dimensions, return false.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[471]||(s[471]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L87-L91",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",oi,[i("summary",null,[s[473]||(s[473]=i("a",{id:"GeometryOps.overlaps-Tuple{GeoInterface.LineTrait, Any, GeoInterface.LineTrait, Any}",href:"#GeometryOps.overlaps-Tuple{GeoInterface.LineTrait, Any, GeoInterface.LineTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[474]||(s[474]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[476]||(s[476]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LineTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.LineTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>If the lines overlap, meaning that they are collinear but each have one endpoint outside of the other line, return true. Else false.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[475]||(s[475]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L124-L129",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",hi,[i("summary",null,[s[477]||(s[477]=i("a",{id:"GeometryOps.overlaps-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.MultiPointTrait, Any}",href:"#GeometryOps.overlaps-Tuple{GeoInterface.MultiPointTrait, Any, GeoInterface.MultiPointTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[478]||(s[478]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[480]||(s[480]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>If the multipoints overlap, meaning some, but not all, of the points within the multipoints are shared, return true.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[479]||(s[479]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L94-L102",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ri,[i("summary",null,[s[481]||(s[481]=i("a",{id:"GeometryOps.overlaps-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}",href:"#GeometryOps.overlaps-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[482]||(s[482]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[484]||(s[484]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, polys1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, polys2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if at least one pair of polygons from multipolygons overlap. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[483]||(s[483]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L204-L212",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ki,[i("summary",null,[s[485]||(s[485]=i("a",{id:"GeometryOps.overlaps-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.PolygonTrait, Any}",href:"#GeometryOps.overlaps-Tuple{GeoInterface.MultiPolygonTrait, Any, GeoInterface.PolygonTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[486]||(s[486]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[488]||(s[488]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, polys1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if polygon overlaps with at least one of the polygons within the multipolygon. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[487]||(s[487]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L192-L200",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",di,[i("summary",null,[s[489]||(s[489]=i("a",{id:"GeometryOps.overlaps-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}",href:"#GeometryOps.overlaps-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.MultiPolygonTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[490]||(s[490]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[492]||(s[492]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.MultiPolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, polys2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return true if polygon overlaps with at least one of the polygons within the multipolygon. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[491]||(s[491]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L173-L181",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",gi,[i("summary",null,[s[493]||(s[493]=i("a",{id:"GeometryOps.overlaps-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.PolygonTrait, Any}",href:"#GeometryOps.overlaps-Tuple{GeoInterface.PolygonTrait, Any, GeoInterface.PolygonTrait, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[494]||(s[494]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[496]||(s[496]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trait_a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly_a,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trait_b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GI.PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly_b,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>If the two polygons intersect with one another, but are not equal, return true. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[495]||(s[495]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L155-L163",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",yi,[i("summary",null,[s[497]||(s[497]=i("a",{id:"GeometryOps.overlaps-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.Wrappers.LinearRing}, Any, Union{GeoInterface.LineStringTrait, GeoInterface.Wrappers.LinearRing}, Any}",href:"#GeometryOps.overlaps-Tuple{Union{GeoInterface.LineStringTrait, GeoInterface.Wrappers.LinearRing}, Any, Union{GeoInterface.LineStringTrait, GeoInterface.Wrappers.LinearRing}, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.overlaps")],-1)),s[498]||(s[498]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[500]||(s[500]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overlaps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineStringTrait, GI.LinearRing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line1,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{GI.LineStringTrait, GI.LinearRing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, line2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>If the curves overlap, meaning that at least one edge of each curve overlaps, return true. Else false.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[499]||(s[499]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/overlaps.jl#L133-L141",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ci,[i("summary",null,[s[501]||(s[501]=i("a",{id:"GeometryOps.polygon_to_line-Tuple{Any}",href:"#GeometryOps.polygon_to_line-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.polygon_to_line")],-1)),s[502]||(s[502]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[504]||(s[504]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polygon_to_line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Converts a Polygon to LineString or MultiLineString</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.275543</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53.464547</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.275543</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53.489271</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.215118</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53.489271</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.215118</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53.464547</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.275543</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53.464547</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polygon_to_line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString{false, false}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.275543</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53.464547</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">…</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">…</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.275543</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53.464547</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[503]||(s[503]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L51-L66",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ei,[i("summary",null,[s[505]||(s[505]=i("a",{id:"GeometryOps.polygonize-Tuple{AbstractMatrix{Bool}}",href:"#GeometryOps.polygonize-Tuple{AbstractMatrix{Bool}}"},[i("span",{class:"jlbinding"},"GeometryOps.polygonize")],-1)),s[506]||(s[506]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[508]||(s[508]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polygonize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{Bool}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polygonize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polygonize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs, ys, A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{Bool}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">polygonize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, xs, ys, A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Polygonize an <code>AbstractMatrix</code> of values, currently to a single class of polygons.</p><p>Returns a <code>MultiPolygon</code> for <code>Bool</code> values and <code>f</code> return values, and a <code>FeatureCollection</code> of <code>Feature</code>s holding <code>MultiPolygon</code> for all other values.</p><p>Function <code>f</code> should return either <code>true</code> or <code>false</code> or a transformation of values into simpler groups, especially useful for floating point arrays.</p><p>If <code>xs</code> and <code>ys</code> are ranges, they are used as the pixel/cell center points. If they are <code>Vector</code> of <code>Tuple</code> they are used as the lower and upper bounds of each pixel/cell.</p><p><strong>Keywords</strong></p><ul><li><p><code>minpoints</code>: ignore polygons with less than <code>minpoints</code> points.</p></li><li><p><code>values</code>: the values to turn into polygons. By default these are <code>union(A)</code>, If function <code>f</code> is passed these refer to the return values of <code>f</code>, by default <code>union(map(f, A)</code>. If values <code>Bool</code>, false is ignored and a single <code>MultiPolygon</code> is returned rather than a <code>FeatureCollection</code>.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">multipolygon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> polygonize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), A);</span></span></code></pre></div>`,9)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[507]||(s[507]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/polygonize.jl#L61-L94",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ui,[i("summary",null,[s[509]||(s[509]=i("a",{id:"GeometryOps.segmentize-Tuple{Any}",href:"#GeometryOps.segmentize-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.segmentize")],-1)),s[510]||(s[510]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[512]||(s[512]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">segmentize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Planar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()], geom; max_distance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, threaded)</span></span></code></pre></div><p>Segmentize a geometry by adding extra vertices to the geometry so that no segment is longer than a given distance. This is useful for plotting geometries with a limited number of vertices, or for ensuring that a geometry is not too &quot;coarse&quot; for a given application.</p><p><strong>Arguments</strong></p><ul><li><p><code>method::Manifold = Planar()</code>: The method to use for segmentizing the geometry. At the moment, only <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Planar"><code>Planar</code></a> (assumes a flat plane) and <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Geodesic"><code>Geodesic</code></a> (assumes geometry on the ellipsoidal Earth and uses Vincenty&#39;s formulae) are available.</p></li><li><p><code>geom</code>: The geometry to segmentize. Must be a <code>LineString</code>, <code>LinearRing</code>, <code>Polygon</code>, <code>MultiPolygon</code>, or <code>GeometryCollection</code>, or some vector or table of those.</p></li><li><p><code>max_distance::Real</code>: The maximum distance between vertices in the geometry. <strong>Beware: for <code>Planar</code>, this is in the units of the geometry, but for <code>Geodesic</code> and <code>Spherical</code> it&#39;s in units of the radius of the sphere.</strong></p></li></ul><p>Returns a geometry of similar type to the input geometry, but resampled.</p>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[511]||(s[511]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/segmentize.jl#L165-L177",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",mi,[i("summary",null,[s[513]||(s[513]=i("a",{id:"GeometryOps.signed_area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.signed_area-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.signed_area")],-1)),s[514]||(s[514]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[516]||(s[516]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">signed_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, [T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Returns the signed area of a single geometry, based on winding order. This is computed slightly differently for different geometries:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- The signed area of a point is always zero.</span></span>
<span class="line"><span>- The signed area of a curve is always zero.</span></span>
<span class="line"><span>- The signed area of a polygon is computed with the shoelace formula and is</span></span>
<span class="line"><span>positive if the polygon coordinates wind clockwise and negative if</span></span>
<span class="line"><span>counterclockwise.</span></span>
<span class="line"><span>- You cannot compute the signed area of a multipolygon as it doesn&#39;t have a</span></span>
<span class="line"><span>meaning as each sub-polygon could have a different winding order.</span></span></code></pre></div><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[515]||(s[515]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/area.jl#L77-L93",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ti,[i("summary",null,[s[517]||(s[517]=i("a",{id:"GeometryOps.signed_distance-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.signed_distance-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.signed_distance")],-1)),s[518]||(s[518]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[520]||(s[520]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">signed_distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point, geom, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span></code></pre></div><p>Calculates the signed distance from the geometry <code>geom</code> to the given point. Points within <code>geom</code> have a negative signed distance, and points outside of <code>geom</code> have a positive signed distance. - The signed distance from a point to a point, line, linestring, or linear ring is equal to the distance between the two. - The signed distance from a point to a polygon is negative if the point is within the polygon and is positive otherwise. The value of the distance is the minimum distance from the point to an edge of the polygon. This includes edges created by holes. - The signed distance from a point to a multigeometry or a geometry collection is the minimum signed distance between the point and any of the sub-geometries.</p><p>Result will be of type T, where T is an optional argument with a default value of Float64.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[519]||(s[519]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/distance.jl#L133-L151",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ci,[i("summary",null,[s[521]||(s[521]=i("a",{id:"GeometryOps.simplify-Tuple{GeometryOps.SimplifyAlg, Any}",href:"#GeometryOps.simplify-Tuple{GeometryOps.SimplifyAlg, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.simplify")],-1)),s[522]||(s[522]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[524]||(s[524]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simplify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simplify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimplifyAlg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Simplify a geometry, feature, feature collection, or nested vectors or a table of these.</p><p><a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.RadialDistance"><code>RadialDistance</code></a>, <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.DouglasPeucker"><code>DouglasPeucker</code></a>, or <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.VisvalingamWhyatt"><code>VisvalingamWhyatt</code></a> algorithms are available, listed in order of increasing quality but decreasing performance.</p><p><code>PoinTrait</code> and <code>MultiPointTrait</code> are returned unchanged.</p><p>The default behaviour is <code>simplify(DouglasPeucker(; kw...), obj)</code>. Pass in other <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.SimplifyAlg"><code>SimplifyAlg</code></a> to use other algorithms.</p><p><strong>Keywords</strong></p><ul><li><p><code>prefilter_alg</code>: <code>SimplifyAlg</code> algorithm used to pre-filter object before using primary filtering algorithm.</p></li><li><p><code>threaded</code>: <code>true</code> or <code>false</code>. Whether to use multithreading. Defaults to <code>false</code>.</p></li><li><p><code>crs</code>: The CRS to attach to geometries. Defaults to <code>nothing</code>.</p></li><li><p><code>calc_extent</code>: <code>true</code> or <code>false</code>. Whether to calculate the extent. Defaults to <code>false</code>.</p></li></ul><p>Keywords for DouglasPeucker are allowed when no algorithm is specified:</p><p><strong>Keywords</strong></p><ul><li><p><code>ratio</code>: the fraction of points that should remain after <code>simplify</code>. Useful as it will generalise for large collections of objects.</p></li><li><p><code>number</code>: the number of points that should remain after <code>simplify</code>. Less useful for large collections of mixed size objects.</p></li><li><p><code>tol</code>: the minimum distance a point will be from the line joining its neighboring points.</p></li></ul><p><strong>Example</strong></p><p>Simplify a polygon to have six points:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.603637</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.399918</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.614624</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.395332</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.639343</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.392466</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.659942</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.394759</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.683975</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.404504</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.697021</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.419406</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.701141</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.434306</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.700454</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.446339</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.694274</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.458369</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.682601</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.465816</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.668869</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.472117</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.646209</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.473835</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.624923</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.472117</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.609817</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.468107</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.595397</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.458369</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.587158</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.442901</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.587158</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.426283</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.590591</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.414248</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.594711</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.406224</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70.603637</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.399918</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simple </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simplify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poly; number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">npoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(simple)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span></span></code></pre></div>`,13)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[523]||(s[523]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/simplify.jl#L99-L162",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",fi,[i("summary",null,[s[525]||(s[525]=i("a",{id:"GeometryOps.t_value-Union{Tuple{T2}, Tuple{T1}, Tuple{N}, Tuple{Union{NTuple{N, T1}, StaticArraysCore.StaticArray{Tuple{N}, T1, 1}}, Union{NTuple{N, T1}, StaticArraysCore.StaticArray{Tuple{N}, T1, 1}}, T2, T2}} where {N, T1<:Number, T2<:Number}",href:"#GeometryOps.t_value-Union{Tuple{T2}, Tuple{T1}, Tuple{N}, Tuple{Union{NTuple{N, T1}, StaticArraysCore.StaticArray{Tuple{N}, T1, 1}}, Union{NTuple{N, T1}, StaticArraysCore.StaticArray{Tuple{N}, T1, 1}}, T2, T2}} where {N, T1<:Number, T2<:Number}"},[i("span",{class:"jlbinding"},"GeometryOps.t_value")],-1)),s[526]||(s[526]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[530]||(s[530]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sᵢ, sᵢ₊₁, rᵢ, rᵢ₊₁)</span></span></code></pre></div><p>Returns the &quot;T-value&quot; as described in Hormann&#39;s presentation <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> on how to calculate the mean-value coordinate.</p><p>Here, <code>sᵢ</code> is the vector from vertex <code>vᵢ</code> to the point, and <code>rᵢ</code> is the norm (length) of <code>sᵢ</code>. <code>s</code> must be <code>Point</code> and <code>r</code> must be real numbers.</p>',3)),i("mjx-container",Fi,[(o(),p("svg",bi,[...s[527]||(s[527]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(361,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">ᵢ</text></g><g data-mml-node="mo" transform="translate(1238.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mfrac" transform="translate(2294.6,0)"><g data-mml-node="mrow" transform="translate(1926.5,710)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" style="stroke-width:3;"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(556,0)" style="stroke-width:3;"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)" style="stroke-width:3;"></path></g></g><g data-mml-node="mrow" transform="translate(1555.7,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(858,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">ᵢ</text></g><g data-mml-node="mo" transform="translate(1458,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1902.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2371.7,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">ᵢ</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2971.7,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₊</text></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3571.7,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₁</text></g></g><g data-mml-node="mo" transform="translate(4171.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(451,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">ᵢ</text></g><g data-mml-node="mo" transform="translate(1273.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1995.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2446.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">ᵢ</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3046.4,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₊</text></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3646.4,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₁</text></g></g><g data-mml-node="mo" transform="translate(4468.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5468.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5937.9,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">ᵢ</text></g><g data-mml-node="mo" transform="translate(6760.1,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7260.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7729.3,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">ᵢ</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(8329.3,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₊</text></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(8929.3,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₁</text></g></g></g><rect width="9729.3" height="60" x="120" y="220"></rect></g></g></g>',1)])])),s[528]||(s[528]=i("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[i("mi",null,"t"),i("mi",null,"ᵢ"),i("mo",null,"="),i("mfrac",null,[i("mrow",null,[i("mrow",{"data-mjx-texclass":"ORD"},[i("mi",{"data-mjx-auto-op":"false"},"det")]),i("mrow",{"data-mjx-texclass":"INNER"},[i("mo",{"data-mjx-texclass":"OPEN"},"("),i("mi",null,"s"),i("mi",null,"ᵢ"),i("mo",null,","),i("mi",null,"s"),i("mi",null,"ᵢ"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",{"data-mjx-pseudoscript":"true"},"₊")]),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",{"data-mjx-pseudoscript":"true"},"₁")]),i("mo",{"data-mjx-texclass":"CLOSE"},")")])]),i("mrow",null,[i("mi",null,"r"),i("mi",null,"ᵢ"),i("mo",null,"∗"),i("mi",null,"r"),i("mi",null,"ᵢ"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",{"data-mjx-pseudoscript":"true"},"₊")]),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",{"data-mjx-pseudoscript":"true"},"₁")]),i("mo",null,"+"),i("mi",null,"s"),i("mi",null,"ᵢ"),i("mo",null,"⋅"),i("mi",null,"s"),i("mi",null,"ᵢ"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",{"data-mjx-pseudoscript":"true"},"₊")]),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",{"data-mjx-pseudoscript":"true"},"₁")])])])])],-1))]),s[531]||(s[531]=t(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;Badge type=&quot;info&quot; class=&quot;source-link&quot; text=&quot;source&quot;&gt;&lt;a href=&quot;https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/barycentric.jl#L211-L227&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;source&lt;/a&gt;&lt;/Badge&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/details&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;details class=&#39;jldocstring custom-block&#39; open&gt;</span></span>
<span class="line"><span>&lt;summary&gt;&lt;a id=&#39;GeometryOps.to_edgelist-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T&#39; href=&#39;#GeometryOps.to_edgelist-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T&#39;&gt;&lt;span class=&quot;jlbinding&quot;&gt;GeometryOps.to_edgelist&lt;/span&gt;&lt;/a&gt; &lt;Badge type=&quot;info&quot; class=&quot;jlObjectType jlMethod&quot; text=&quot;Method&quot; /&gt;&lt;/summary&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`julia</span></span>
<span class="line"><span>to_edgelist(geom, [::Type{T}])</span></span></code></pre></div><p>Convert a geometry into a vector of <code>GI.Line</code> objects with attached extents.</p>`,2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[529]||(s[529]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L187-L191",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ai,[i("summary",null,[s[532]||(s[532]=i("a",{id:"GeometryOps.to_edgelist-Union{Tuple{T}, Tuple{E}, Tuple{E, Any}, Tuple{E, Any, Type{T}}} where {E<:Extents.Extent, T}",href:"#GeometryOps.to_edgelist-Union{Tuple{T}, Tuple{E}, Tuple{E, Any}, Tuple{E, Any, Type{T}}} where {E<:Extents.Extent, T}"},[i("span",{class:"jlbinding"},"GeometryOps.to_edgelist")],-1)),s[533]||(s[533]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[535]||(s[535]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to_edgelist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom, [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(::Vector{GI.Line}, ::Vector{Int})</span></span></code></pre></div><p>Filter the edges of <code>geom</code> for those that intersect <code>ext</code>, and return:</p><ul><li><p>a vector of <code>GI.Line</code> objects with attached extents,</p></li><li><p>a vector of indices into the original geometry.</p></li></ul>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[534]||(s[534]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L195-L202",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_i,[i("summary",null,[s[536]||(s[536]=i("a",{id:"GeometryOps.to_edges-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T",href:"#GeometryOps.to_edges-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"},[i("span",{class:"jlbinding"},"GeometryOps.to_edges")],-1)),s[537]||(s[537]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[539]||(s[539]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to_edges</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Convert any geometry or collection of geometries into a flat vector of <code>Tuple{Tuple{Float64,Float64},Tuple{Float64,Float64}}</code> edges.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[538]||(s[538]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/utils/utils.jl#L74-L79",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Gi,[i("summary",null,[s[540]||(s[540]=i("a",{id:"GeometryOps.touches-Tuple{Any, Any}",href:"#GeometryOps.touches-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.touches")],-1)),s[541]||(s[541]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[543]||(s[543]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">touches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the first geometry touches the second geometry. In other words, the two interiors cannot interact, but one of the geometries must have a boundary point that interacts with either the other geometry&#39;s interior or boundary.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">touches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l1, l2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[542]||(s[542]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/touches.jl#L59-L78",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ji,[i("summary",null,[s[544]||(s[544]=i("a",{id:"GeometryOps.touches-Tuple{Any}",href:"#GeometryOps.touches-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.touches")],-1)),s[545]||(s[545]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[547]||(s[547]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">touches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input touches <code>g1</code>. This is equivalent to <code>x -&gt; touches(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[546]||(s[546]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/touches.jl#L81-L86",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",vi,[i("summary",null,[s[548]||(s[548]=i("a",{id:"GeometryOps.transform-Tuple{Any, Any}",href:"#GeometryOps.transform-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.transform")],-1)),s[549]||(s[549]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[551]||(s[551]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, obj)</span></span></code></pre></div><p>Apply a function <code>f</code> to all the points in <code>obj</code>.</p><p>Points will be passed to <code>f</code> as an <code>SVector</code> to allow using CoordinateTransformations.jl and Rotations.jl without hassle.</p><p><code>SVector</code> is also a valid GeoInterface.jl point, so will work in all GeoInterface.jl methods.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> geom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]), GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CoordinateTransformations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Translation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Translation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, geom)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Polygon{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearRing{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64}}, Nothing, Nothing}}, Nothing, Nothing}(GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Linea</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rRing{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64}}, Nothing, Nothing}[GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing{false, false, Vector{StaticArraysCore.SVector{2, Float64}}, Nothing, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StaticArraysCo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64}[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing{false, false, Vector{StaticArraysCore.SVector{2, Float64}}, Nothing, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StaticA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64}[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>With Rotations.jl you need to actually multiply the Rotation by the <code>SVector</code> point, which is easy using an anonymous function.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rotations</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RotMatrix{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p, geom)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Polygon{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearRing{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Int64}}, Nothing, Nothing}}, Nothing, Nothing}(GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ing{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Vector{StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Int64}}, Nothing, Nothing}[GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing{false, false, Vector{StaticArraysCore.SVector{2, Int64}}, Nothing, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctor{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Int64}[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), GeoInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wrappers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing{false, false, Vector{StaticArraysCore.SVector{2, Int64}}, Nothing, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StaticArraysCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SVector{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Int64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,8)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[550]||(s[550]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/transform.jl#L24-L67",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Oi,[i("summary",null,[s[552]||(s[552]=i("a",{id:"GeometryOps.tuples-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T",href:"#GeometryOps.tuples-Union{Tuple{Any}, Tuple{T}, Tuple{Any, Type{T}}} where T"},[i("span",{class:"jlbinding"},"GeometryOps.tuples")],-1)),s[553]||(s[553]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[555]||(s[555]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tuples</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span></code></pre></div><p>Convert all points in <code>obj</code> to <code>Tuple</code>s, wherever the are nested.</p><p>Returns a similar object or collection of objects using GeoInterface.jl geometries wrapping <code>Tuple</code> points.</p><p><strong>Keywords</strong></p><ul><li><p><code>threaded</code>: <code>true</code> or <code>false</code>. Whether to use multithreading. Defaults to <code>false</code>.</p></li><li><p><code>crs</code>: The CRS to attach to geometries. Defaults to <code>nothing</code>.</p></li><li><p><code>calc_extent</code>: <code>true</code> or <code>false</code>. Whether to calculate the extent. Defaults to <code>false</code>.</p></li></ul>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[554]||(s[554]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/transformations/tuples.jl#L3-L14",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Bi,[i("summary",null,[s[556]||(s[556]=i("a",{id:"GeometryOps.union-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T<:AbstractFloat",href:"#GeometryOps.union-Union{Tuple{T}, Tuple{GeometryOps.FosterHormannClipping, Any, Any}, Tuple{GeometryOps.FosterHormannClipping, Any, Any, Type{T}}} where T<:AbstractFloat"},[i("span",{class:"jlbinding"},"GeometryOps.union")],-1)),s[557]||(s[557]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[559]||(s[559]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom_a, geom_b, [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fix_multipoly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UnionIntersectingPolygons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Return the union between two geometries as a list of geometries. Return an empty list if none are found. The type of the list will be constrained as much as possible given the input geometries. Furthermore, the user can provide a <code>taget</code> type as a keyword argument and a list of target geometries found in the difference will be returned. The user can also provide a float type &#39;T&#39; that they would like the points of returned geometries to be. If the user is taking a intersection involving one or more multipolygons, and the multipolygon might be comprised of polygons that intersect, if <code>fix_multipoly</code> is set to an <code>IntersectingPolygons</code> correction (the default is <code>UnionIntersectingPolygons()</code>), then the needed multipolygons will be fixed to be valid before performing the intersection to ensure a correct answer. Only set <code>fix_multipoly</code> to false if you know that the multipolygons are valid, as it will avoid unneeded computation.</p><p>Calculates the union between two polygons.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI, GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">union_poly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p1, p2; target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PolygonTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(union_poly)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element Vector{Vector{Vector{Vector{Float64}}}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]]</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[558]||(s[558]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/clipping/union.jl#L4-L34",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Di,[i("summary",null,[s[560]||(s[560]=i("a",{id:"GeometryOps.weighted_mean-Union{Tuple{WT}, Tuple{WT, Any, Any}} where WT<:Real",href:"#GeometryOps.weighted_mean-Union{Tuple{WT}, Tuple{WT, Any, Any}} where WT<:Real"},[i("span",{class:"jlbinding"},"GeometryOps.weighted_mean")],-1)),s[561]||(s[561]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[563]||(s[563]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">weighted_mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(weight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x1, x2)</span></span></code></pre></div><p>Returns the weighted mean of <code>x1</code> and <code>x2</code>, where <code>weight</code> is the weight of <code>x1</code>.</p><p>Specifically, calculates <code>x1 * weight + x2 * (1 - weight)</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The idea for this method is that you can override this for custom types, like Color types, in extension modules.</p></div>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[562]||(s[562]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/barycentric.jl#L168-L177",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",xi,[i("summary",null,[s[564]||(s[564]=i("a",{id:"GeometryOps.within-Tuple{Any, Any}",href:"#GeometryOps.within-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOps.within")],-1)),s[565]||(s[565]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[567]||(s[567]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span></code></pre></div><p>Return <code>true</code> if the first geometry is completely within the second geometry. The interiors of both geometries must intersect and the interior and boundary of the primary geometry (geom1) must not intersect the exterior of the secondary geometry (geom2).</p><p>Furthermore, <code>within</code> returns the exact opposite result of <code>contains</code>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO, GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(point, line)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[566]||(s[566]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/within.jl#L61-L82",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ii,[i("summary",null,[s[568]||(s[568]=i("a",{id:"GeometryOps.within-Tuple{Any}",href:"#GeometryOps.within-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOps.within")],-1)),s[569]||(s[569]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[571]||(s[571]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g1)</span></span></code></pre></div><p>Return a function that checks if its input is within <code>g1</code>. This is equivalent to <code>x -&gt; within(x, g1)</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[570]||(s[570]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/src/methods/geom_relations/within.jl#L85-L90",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[747]||(s[747]=i("h2",{id:"Core-types",tabindex:"-1"},[l("Core types "),i("a",{class:"header-anchor",href:"#Core-types","aria-label":'Permalink to "Core types {#Core-types}"'},"​")],-1)),i("details",Si,[i("summary",null,[s[572]||(s[572]=i("a",{id:"GeometryOpsCore.WGS84_EARTH_INV_FLATTENING",href:"#GeometryOpsCore.WGS84_EARTH_INV_FLATTENING"},[i("span",{class:"jlbinding"},"GeometryOpsCore.WGS84_EARTH_INV_FLATTENING")],-1)),s[573]||(s[573]=l()),a(e,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),s[575]||(s[575]=i("p",null,"The inverse flattening of the WGS84 ellipsoid",-1)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[574]||(s[574]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/constants.jl#L4",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",wi,[i("summary",null,[s[576]||(s[576]=i("a",{id:"GeometryOpsCore.WGS84_EARTH_MEAN_RADIUS",href:"#GeometryOpsCore.WGS84_EARTH_MEAN_RADIUS"},[i("span",{class:"jlbinding"},"GeometryOpsCore.WGS84_EARTH_MEAN_RADIUS")],-1)),s[577]||(s[577]=l()),a(e,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),s[579]||(s[579]=i("p",null,"The mean radius of the WGS84 ellipsoid, used for spherical manifold default",-1)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[578]||(s[578]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/constants.jl#L7",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Pi,[i("summary",null,[s[580]||(s[580]=i("a",{id:"GeometryOpsCore.WGS84_EARTH_SEMI_MAJOR_RADIUS",href:"#GeometryOpsCore.WGS84_EARTH_SEMI_MAJOR_RADIUS"},[i("span",{class:"jlbinding"},"GeometryOpsCore.WGS84_EARTH_SEMI_MAJOR_RADIUS")],-1)),s[581]||(s[581]=l()),a(e,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),s[583]||(s[583]=i("p",null,"The semi-major axis of the WGS84 ellipsoid",-1)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[582]||(s[582]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/constants.jl#L1",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Qi,[i("summary",null,[s[584]||(s[584]=i("a",{id:"GeometryOpsCore.Algorithm",href:"#GeometryOpsCore.Algorithm"},[i("span",{class:"jlbinding"},"GeometryOpsCore.Algorithm")],-1)),s[585]||(s[585]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[587]||(s[587]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Algorithm{M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Manifold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The abstract supertype for all GeometryOps algorithms. These define how to perform a particular <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Operation"><code>Operation</code></a>.</p><p>An algorithm may be associated with one or many <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Manifold"><code>Manifold</code></a>s. It may either have the manifold as a field, or have it as a static parameter (e.g. <code>struct GEOS &lt;: Algorithm{Planar}</code>).</p><p><strong>Interface</strong></p><p>All <code>Algorithm</code>s must implement the following methods:</p><ul><li><p><code>rebuild(alg, manifold::Manifold)</code> Rebuild algorithm <code>alg</code> with a new manifold as passed in the second argument. This may error and throw a <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.WrongManifoldException"><code>WrongManifoldException</code></a> if the manifold is not compatible with that algorithm.</p></li><li><p><code>manifold(alg::Algorithm)</code> Return the manifold associated with the algorithm.</p></li><li><p><code>best_manifold(alg::Algorithm, input)</code>: Return the best manifold for that algorithm, in the absence of any other context. WARNING: this may change in future and is not stable!</p></li></ul><p>The actual implementation is left to the implementation of that particular <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Operation"><code>Operation</code></a>.</p><p><strong>Notable subtypes</strong></p><ul><li><p><a href="/GeometryOps.jl/previews/PR339/source/src/types/algorithm#AutoAlgorithm"><code>AutoAlgorithm</code></a>: Tells the <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Operation"><code>Operation</code></a> receiving it to automatically select the best algorithm for its input data.</p></li><li><p><a href="/GeometryOps.jl/previews/PR339/source/src/types/algorithm#ManifoldIndependentAlgorithm"><code>ManifoldIndependentAlgorithm</code></a>: An abstract supertype for an algorithm that works on any manifold. The manifold must be stored in the algorithm for a <code>ManifoldIndependentAlgorithm</code>, and accessed via <code>manifold(alg)</code>.</p></li><li><p><a href="/GeometryOps.jl/previews/PR339/source/src/types/algorithm#SingleManifoldAlgorithm"><code>SingleManifoldAlgorithm</code></a>: An abstract supertype for an algorithm that only works on a single manifold, specified in its type parameter. <code>SingleManifoldAlgorithm{Planar}</code> is a special case that does not have to store its manifold, since that doesn&#39;t contain any information. All other <code>SingleManifoldAlgorithm</code>s must store their manifold, since they do contain information.</p></li><li><p><a href="/GeometryOps.jl/previews/PR339/source/src/types/algorithm#NoAlgorithm"><code>NoAlgorithm</code></a>: A type that indicates no algorithm is to be used, essentially the equivalent of <code>nothing</code>.</p></li></ul>',9)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[586]||(s[586]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/algorithm.jl#L45-L80",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Li,[i("summary",null,[s[588]||(s[588]=i("a",{id:"GeometryOpsCore.Applicator",href:"#GeometryOpsCore.Applicator"},[i("span",{class:"jlbinding"},"GeometryOpsCore.Applicator")],-1)),s[589]||(s[589]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[591]||(s[591]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Applicator{F,T}</span></span></code></pre></div><p>An abstract type for applicators that apply a function to a target object.</p><p>The type parameter <code>F</code> is the type of the function to apply, and <code>T</code> is the type of the target object.</p><p>A common dispatch pattern is to dispatch on <code>F</code> which may also be e.g. a ThreadFunctor.</p><p><strong>Interface</strong></p><p>All applicators must be callable by an index integer, and define the following methods:</p><ul><li><code>rebuild(a::Applicator, f)</code> - swap out the function and return a new applicator.</li></ul><p>The calling convention is <code>my_applicator(i::Int)</code>, so applicators must define this method.</p>',8)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[590]||(s[590]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/applicators.jl#L21-L36",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Vi,[i("summary",null,[s[592]||(s[592]=i("a",{id:"GeometryOpsCore.ApplyToArray",href:"#GeometryOpsCore.ApplyToArray"},[i("span",{class:"jlbinding"},"GeometryOpsCore.ApplyToArray")],-1)),s[593]||(s[593]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[595]||(s[595]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ApplyToArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, target, arr, kw)</span></span></code></pre></div><p>Create an <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Applicator"><code>Applicator</code></a> that applies a function to all elements of <code>arr</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[594]||(s[594]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/applicators.jl#L110-L114",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ri,[i("summary",null,[s[596]||(s[596]=i("a",{id:"GeometryOpsCore.ApplyToFeatures",href:"#GeometryOpsCore.ApplyToFeatures"},[i("span",{class:"jlbinding"},"GeometryOpsCore.ApplyToFeatures")],-1)),s[597]||(s[597]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[599]||(s[599]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ApplyToFeatures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, target, fc, kw)</span></span></code></pre></div><p>Create an <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Applicator"><code>Applicator</code></a> that applies a function to all features of <code>fc</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[598]||(s[598]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/applicators.jl#L122-L126",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Mi,[i("summary",null,[s[600]||(s[600]=i("a",{id:"GeometryOpsCore.ApplyToGeom",href:"#GeometryOpsCore.ApplyToGeom"},[i("span",{class:"jlbinding"},"GeometryOpsCore.ApplyToGeom")],-1)),s[601]||(s[601]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[603]||(s[603]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ApplyToGeom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, target, geom, kw)</span></span></code></pre></div><p>Create an <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Applicator"><code>Applicator</code></a> that applies a function to all sub-geometries of <code>geom</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[602]||(s[602]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/applicators.jl#L116-L120",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ni,[i("summary",null,[s[604]||(s[604]=i("a",{id:"GeometryOpsCore.AutoAlgorithm",href:"#GeometryOpsCore.AutoAlgorithm"},[i("span",{class:"jlbinding"},"GeometryOpsCore.AutoAlgorithm")],-1)),s[605]||(s[605]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[607]||(s[607]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AutoAlgorithm{T, M &lt;: Manifold}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(manifold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">M</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Indicates that the <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Operation"><code>Operation</code></a> should automatically select the best algorithm for its input data, based on the passed in manifold (may be an <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.AutoManifold"><code>AutoManifold</code></a>) and data <code>x</code>.</p><p>The actual implementation is left to the implementation of that particular <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Operation"><code>Operation</code></a>.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[606]||(s[606]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/algorithm.jl#L110-L118",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",qi,[i("summary",null,[s[608]||(s[608]=i("a",{id:"GeometryOpsCore.AutoManifold",href:"#GeometryOpsCore.AutoManifold"},[i("span",{class:"jlbinding"},"GeometryOpsCore.AutoManifold")],-1)),s[609]||(s[609]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[611]||(s[611]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AutoManifold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>The <code>AutoManifold</code> is a special manifold that automatically selects the best manifold for the operation. It does not carry any parameters, nor does it indicate anything about the nature of the space.</p><p>This gets resolved to a specific manifold when an operation is applied, using the <code>format</code> method.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[610]||(s[610]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/manifold.jl#L35-L42",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ji,[i("summary",null,[s[612]||(s[612]=i("a",{id:"GeometryOpsCore.BoolsAsTypes",href:"#GeometryOpsCore.BoolsAsTypes"},[i("span",{class:"jlbinding"},"GeometryOpsCore.BoolsAsTypes")],-1)),s[613]||(s[613]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[615]||(s[615]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BoolsAsTypes</span></span></code></pre></div>',1)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[614]||(s[614]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/booltypes.jl#L25-L28",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Hi,[i("summary",null,[s[616]||(s[616]=i("a",{id:"GeometryOpsCore.False",href:"#GeometryOpsCore.False"},[i("span",{class:"jlbinding"},"GeometryOpsCore.False")],-1)),s[617]||(s[617]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[619]||(s[619]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> False </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BoolsAsTypes</span></span></code></pre></div><p>A struct that means <code>false</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[618]||(s[618]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/booltypes.jl#L38-L42",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ui,[i("summary",null,[s[620]||(s[620]=i("a",{id:"GeometryOpsCore.Geodesic",href:"#GeometryOpsCore.Geodesic"},[i("span",{class:"jlbinding"},"GeometryOpsCore.Geodesic")],-1)),s[621]||(s[621]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[634]||(s[634]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Geodesic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; semimajor_axis, inv_flattening)</span></span></code></pre></div>',1)),i("p",null,[s[626]||(s[626]=l("A geodesic manifold means that the geometry is on a 3-dimensional ellipsoid, parameterized by ",-1)),s[627]||(s[627]=i("code",null,"semimajor_axis",-1)),s[628]||(s[628]=l(" (",-1)),i("mjx-container",Wi,[(o(),p("svg",zi,[...s[622]||(s[622]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("path",{"data-c":"1D44E",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z",style:{"stroke-width":"3"}})])])],-1)])])),s[623]||(s[623]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"a")])],-1))]),s[629]||(s[629]=l(" in mathematical parlance) and ",-1)),s[630]||(s[630]=i("code",null,"inv_flattening",-1)),s[631]||(s[631]=l(" (",-1)),i("mjx-container",Zi,[(o(),p("svg",Ki,[...s[624]||(s[624]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width:3;"></path></g></g></g>',1)])])),s[625]||(s[625]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mn",null,"1"),i("mrow",{"data-mjx-texclass":"ORD"},[i("mo",null,"/")]),i("mi",null,"f")])],-1))]),s[632]||(s[632]=l(").",-1))]),s[635]||(s[635]=i("p",null,"Usually, this is only relevant for area and segmentization calculations. It becomes more relevant as one grows closer to the poles (or equator).",-1)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[633]||(s[633]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/manifold.jl#L75-L82",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Xi,[i("summary",null,[s[636]||(s[636]=i("a",{id:"GeometryOpsCore.Manifold",href:"#GeometryOpsCore.Manifold"},[i("span",{class:"jlbinding"},"GeometryOpsCore.Manifold")],-1)),s[637]||(s[637]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[639]||(s[639]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Manifold</span></span></code></pre></div><p>A manifold is mathematically defined as a topological space that resembles Euclidean space locally.</p><p>We use the manifold definition to define the space in which an operation should be performed, or where a geometry lies.</p><p>Currently we have <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Planar"><code>Planar</code></a>, <a href="/GeometryOps.jl/previews/PR339/source/methods/area#Spherical"><code>Spherical</code></a>, and <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Geodesic"><code>Geodesic</code></a> manifolds.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[638]||(s[638]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/manifold.jl#L24-L32",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Yi,[i("summary",null,[s[640]||(s[640]=i("a",{id:"GeometryOpsCore.ManifoldIndependentAlgorithm",href:"#GeometryOpsCore.ManifoldIndependentAlgorithm"},[i("span",{class:"jlbinding"},"GeometryOpsCore.ManifoldIndependentAlgorithm")],-1)),s[641]||(s[641]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[643]||(s[643]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ManifoldIndependentAlgorithm{M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Manifold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Algorithm{M}</span></span></code></pre></div><p>The abstract supertype for a manifold-independent algorithm, i.e., one which may work on any manifold.</p><p>The manifold is stored in the algorithm for a <code>ManifoldIndependentAlgorithm</code>, and accessed via <code>manifold(alg)</code>.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[642]||(s[642]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/algorithm.jl#L133-L139",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",$i,[i("summary",null,[s[644]||(s[644]=i("a",{id:"GeometryOpsCore.MissingKeywordInAlgorithmException",href:"#GeometryOpsCore.MissingKeywordInAlgorithmException"},[i("span",{class:"jlbinding"},"GeometryOpsCore.MissingKeywordInAlgorithmException")],-1)),s[645]||(s[645]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[647]||(s[647]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MissingKeywordInAlgorithmException{Alg, F} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span></span></code></pre></div><p>An error type which is thrown when a keyword argument is missing from an algorithm.</p><p>The <code>alg</code> argument is the algorithm struct, and the <code>keyword</code> argument is the keyword that was missing.</p><p>This error message is used in the <a href="/GeometryOps.jl/previews/PR339/api#GeometryOps.enforce-Tuple{GeometryOps.CLibraryPlanarAlgorithm, Symbol, Any}"><code>enforce</code></a> method.</p><p><strong>Usage</strong></p><p>This is of course not how you would actually use this error type, but it is how you construct and throw it.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MissingKeywordInAlgorithmException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GEOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; tokl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), my_function, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:tol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Real world usage will often look like this:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CLibraryPlanarAlgorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mykwarg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enforce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alg, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:mykwarg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, my_function) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># this will throw an error if :mykwarg is not present in alg</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,9)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[646]||(s[646]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/exceptions.jl#L60-L86",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",se,[i("summary",null,[s[648]||(s[648]=i("a",{id:"GeometryOpsCore.NoAlgorithm",href:"#GeometryOpsCore.NoAlgorithm"},[i("span",{class:"jlbinding"},"GeometryOpsCore.NoAlgorithm")],-1)),s[649]||(s[649]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[651]||(s[651]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NoAlgorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(manifold)</span></span></code></pre></div><p>A type that indicates no algorithm is to be used, essentially the equivalent of <code>nothing</code>.</p><p>Stores a manifold within itself.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[650]||(s[650]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/algorithm.jl#L170-L177",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ie,[i("summary",null,[s[652]||(s[652]=i("a",{id:"GeometryOpsCore.Operation",href:"#GeometryOpsCore.Operation"},[i("span",{class:"jlbinding"},"GeometryOpsCore.Operation")],-1)),s[653]||(s[653]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[655]||(s[655]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Operation{Alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Operations are callable structs, that contain the entire specification for what the algorithm will do.</p><p>Sometimes they may be underspecified and only materialized fully when you see the geometry, so you can extract the best manifold for those geometries.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[654]||(s[654]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/operation.jl#L40-L47",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ee,[i("summary",null,[s[656]||(s[656]=i("a",{id:"GeometryOpsCore.Planar",href:"#GeometryOpsCore.Planar"},[i("span",{class:"jlbinding"},"GeometryOpsCore.Planar")],-1)),s[657]||(s[657]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[659]||(s[659]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Planar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A planar manifold refers to the 2D Euclidean plane.</p><p>Z coordinates may be accepted but will not influence geometry calculations, which are done purely on 2D geometry. This is the standard &quot;2.5D&quot; model used by e.g. GEOS.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[658]||(s[658]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/manifold.jl#L45-L52",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ae,[i("summary",null,[s[660]||(s[660]=i("a",{id:"GeometryOpsCore.SingleManifoldAlgorithm",href:"#GeometryOpsCore.SingleManifoldAlgorithm"},[i("span",{class:"jlbinding"},"GeometryOpsCore.SingleManifoldAlgorithm")],-1)),s[661]||(s[661]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[663]||(s[663]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SingleManifoldAlgorithm{M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Manifold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Algorithm{M}</span></span></code></pre></div><p>The abstract supertype for a single-manifold algorithm, i.e., one which is known to only work on a single manifold.</p><p>The manifold may be accessed via <code>manifold(alg)</code>.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[662]||(s[662]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/algorithm.jl#L145-L152",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",te,[i("summary",null,[s[664]||(s[664]=i("a",{id:"GeometryOpsCore.Spherical",href:"#GeometryOpsCore.Spherical"},[i("span",{class:"jlbinding"},"GeometryOpsCore.Spherical")],-1)),s[665]||(s[665]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[677]||(s[677]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spherical</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; radius)</span></span></code></pre></div><p>A spherical manifold means that the geometry is on the 3-sphere (but is represented by 2-D longitude and latitude).</p><p><strong>Extended help</strong></p>',3)),i("div",ne,[s[674]||(s[674]=i("p",{class:"custom-block-title"},"Note",-1)),i("p",null,[s[668]||(s[668]=l("The traditional definition of spherical coordinates in physics and mathematics, ",-1)),i("mjx-container",le,[(o(),p("svg",pe,[...s[666]||(s[666]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(451,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(895.7,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1364.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1809.3,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z" style="stroke-width:3;"></path></g></g></g>',1)])])),s[667]||(s[667]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"r"),i("mo",null,","),i("mi",null,"θ"),i("mo",null,","),i("mi",null,"ϕ")])],-1))]),s[669]||(s[669]=l(", uses the ",-1)),s[670]||(s[670]=i("em",null,"colatitude",-1)),s[671]||(s[671]=l(", that measures angular displacement from the ",-1)),s[672]||(s[672]=i("code",null,"z",-1)),s[673]||(s[673]=l("-axis.",-1))]),s[675]||(s[675]=i("p",null,[l("Here, we use the geographic definition of longitude and latitude, meaning that "),i("code",null,"lon"),l(" is longitude between -180 and 180, and "),i("code",null,"lat"),l(" is latitude between "),i("code",null,"-90"),l(" (south pole) and "),i("code",null,"90"),l(" (north pole).")],-1))]),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[676]||(s[676]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/manifold.jl#L56-L70",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",oe,[i("summary",null,[s[678]||(s[678]=i("a",{id:"GeometryOpsCore.TaskFunctors",href:"#GeometryOpsCore.TaskFunctors"},[i("span",{class:"jlbinding"},"GeometryOpsCore.TaskFunctors")],-1)),s[679]||(s[679]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[681]||(s[681]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TaskFunctors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(functors, tasks_per_thread)</span></span></code></pre></div><p>A struct to hold the functors and tasks_per_thread, for internal use with <code>_maptasks</code> where functions have state that cannot be shared accross threads, such as <code>Proj.Transformation</code>.</p><p><code>functors</code> must be an array or tuple of functors, one per thread, and <code>tasks_per_thread</code> must be an integer. This also allows you to control the number of tasks per thread that <code>_maptasks</code> launches, useful for tuning performance if you like.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[680]||(s[680]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/tasks.jl#L21-L32",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",he,[i("summary",null,[s[682]||(s[682]=i("a",{id:"GeometryOpsCore.TraitTarget",href:"#GeometryOpsCore.TraitTarget"},[i("span",{class:"jlbinding"},"GeometryOpsCore.TraitTarget")],-1)),s[683]||(s[683]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[685]||(s[685]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TraitTarget{T}</span></span></code></pre></div><p>This struct holds a trait parameter or a union of trait parameters.</p><p>It is primarily used for dispatch into methods which select trait levels, like <code>apply</code>, or as a parameter to <code>target</code>.</p><p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TraitTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PointTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TraitTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LineStringTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRingTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and other traits as you may like</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TraitTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TraitTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># There are also type based constructors available, but that&#39;s not advised.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TraitTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PointTrait)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TraitTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Union{GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LineStringTrait, GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearRingTrait})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># etc.</span></span></code></pre></div>`,5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[684]||(s[684]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/traittarget.jl#L11-L30",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",re,[i("summary",null,[s[686]||(s[686]=i("a",{id:"GeometryOpsCore.True",href:"#GeometryOpsCore.True"},[i("span",{class:"jlbinding"},"GeometryOpsCore.True")],-1)),s[687]||(s[687]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[689]||(s[689]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> True </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BoolsAsTypes</span></span></code></pre></div><p>A struct that means <code>true</code>.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[688]||(s[688]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/booltypes.jl#L31-L35",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ke,[i("summary",null,[s[690]||(s[690]=i("a",{id:"GeometryOpsCore.WithTrait",href:"#GeometryOpsCore.WithTrait"},[i("span",{class:"jlbinding"},"GeometryOpsCore.WithTrait")],-1)),s[691]||(s[691]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[693]||(s[693]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WithTrait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f)</span></span></code></pre></div><p>WithTrait is a functor that applies a function to a trait and an object.</p><p>Specifically, the calling convention is for <code>f</code> is changed from <code>f(geom)</code> to <code>f(trait, geom; kw...)</code>.</p><p>This is useful to keep the trait materialized through the call stack, which can improve inferrability and performance.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[692]||(s[692]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/applicators.jl#L60-L70",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",de,[i("summary",null,[s[694]||(s[694]=i("a",{id:"GeometryOpsCore.WrongManifoldException",href:"#GeometryOpsCore.WrongManifoldException"},[i("span",{class:"jlbinding"},"GeometryOpsCore.WrongManifoldException")],-1)),s[695]||(s[695]=l()),a(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[697]||(s[697]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WrongManifoldException{InputManifold, DesiredManifold, Algorithm} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span></span></code></pre></div><p>This error is thrown when an <code>Algorithm</code> is called with a manifold that it was not designed for.</p><p>It&#39;s mainly thrown when constructing <code>SingleManifoldAlgorithm</code> types.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[696]||(s[696]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/exceptions.jl#L26-L32",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ge,[i("summary",null,[s[698]||(s[698]=i("a",{id:"GeometryOpsCore.apply-Union{Tuple{F}, Tuple{F, Any, Any}} where F",href:"#GeometryOpsCore.apply-Union{Tuple{F}, Tuple{F, Any, Any}} where F"},[i("span",{class:"jlbinding"},"GeometryOpsCore.apply")],-1)),s[699]||(s[699]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[701]||(s[701]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{TraitTarget, GI.AbstractTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reconstruct a geometry, feature, feature collection, or nested vectors of either using the function <code>f</code> on the <code>target</code> trait.</p><p><code>f(target_geom) =&gt; x</code> where <code>x</code> also has the <code>target</code> trait, or a trait that can be substituted. For example, swapping <code>PolgonTrait</code> to <code>MultiPointTrait</code> will fail if the outer object has <code>MultiPolygonTrait</code>, but should work if it has <code>FeatureTrait</code>.</p><p>Objects &quot;shallower&quot; than the target trait are always completely rebuilt, like a <code>Vector</code> of <code>FeatureCollectionTrait</code> of <code>FeatureTrait</code> when the target has <code>PolygonTrait</code> and is held in the features. These will always be GeoInterface geometries/feature/feature collections. But &quot;deeper&quot; objects may remain unchanged or be whatever GeoInterface compatible objects <code>f</code> returns.</p><p>The result is a functionally similar geometry with values depending on <code>f</code>.</p><ul><li><p><code>threaded</code>: <code>true</code> or <code>false</code>. Whether to use multithreading. Defaults to <code>false</code>.</p></li><li><p><code>crs</code>: The CRS to attach to geometries. Defaults to <code>nothing</code>.</p></li><li><p><code>calc_extent</code>: <code>true</code> or <code>false</code>. Whether to calculate the extent. Defaults to <code>false</code>.</p></li></ul><p><strong>Example</strong></p><p>Flipped point the order in any feature or geometry, or iterables of either:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flipped_geom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PointTrait, geom) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p), GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,9)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[700]||(s[700]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/apply.jl#L100-L134",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ye,[i("summary",null,[s[702]||(s[702]=i("a",{id:"GeometryOpsCore.applyreduce-Union{Tuple{O}, Tuple{F}, Tuple{F, O, Any, Any}} where {F, O}",href:"#GeometryOpsCore.applyreduce-Union{Tuple{O}, Tuple{F}, Tuple{F, O, Any, Any}} where {F, O}"},[i("span",{class:"jlbinding"},"GeometryOpsCore.applyreduce")],-1)),s[703]||(s[703]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[705]||(s[705]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">applyreduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, op, target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{TraitTarget, GI.AbstractTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj; threaded, init, kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply function <code>f</code> to all objects with the <code>target</code> trait, and reduce the result with an <code>op</code> like <code>+</code>.</p><p>The order and grouping of application of <code>op</code> is not guaranteed.</p><p>If <code>threaded==true</code> threads will be used over arrays and iterables, feature collections and nested geometries.</p><p><code>init</code> functions the same way as it does in base Julia functions like <code>reduce</code>.</p>',5)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[704]||(s[704]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/applyreduce.jl#L53-L65",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ce,[i("summary",null,[s[706]||(s[706]=i("a",{id:"GeometryOpsCore.best_manifold",href:"#GeometryOpsCore.best_manifold"},[i("span",{class:"jlbinding"},"GeometryOpsCore.best_manifold")],-1)),s[707]||(s[707]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[709]||(s[709]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">best_manifold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, input)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Manifold</span></span></code></pre></div><p>Return the best <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Manifold"><code>Manifold</code></a> for the algorithm <code>alg</code> based on the given <code>input</code>.</p><p>May be any subtype of <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Manifold"><code>Manifold</code></a>.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[708]||(s[708]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/algorithm.jl#L97-L103",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ee,[i("summary",null,[s[710]||(s[710]=i("a",{id:"GeometryOpsCore.booltype",href:"#GeometryOpsCore.booltype"},[i("span",{class:"jlbinding"},"GeometryOpsCore.booltype")],-1)),s[711]||(s[711]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[713]||(s[713]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">booltype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Returns a <a href="/GeometryOps.jl/previews/PR339/source/src/types/booltypes#BoolsAsTypes"><code>BoolsAsTypes</code></a> from <code>x</code>, whether it&#39;s a boolean or a BoolsAsTypes.</p>',2)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[712]||(s[712]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/booltypes.jl#L45-L49",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",ue,[i("summary",null,[s[714]||(s[714]=i("a",{id:"GeometryOpsCore.flatten-Union{Tuple{Target}, Tuple{Type{Target}, Any}} where Target<:GeoInterface.AbstractTrait",href:"#GeometryOpsCore.flatten-Union{Tuple{Target}, Tuple{Type{Target}, Any}} where Target<:GeoInterface.AbstractTrait"},[i("span",{class:"jlbinding"},"GeometryOpsCore.flatten")],-1)),s[715]||(s[715]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[717]||(s[717]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:GI.AbstractTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:GI.AbstractTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj)</span></span></code></pre></div><p>Lazily flatten any <code>AbstractArray</code>, iterator, <code>FeatureCollectionTrait</code>, <code>FeatureTrait</code> or <code>AbstractGeometryTrait</code> object <code>obj</code>, so that objects with the <code>target</code> trait are returned by the iterator.</p><p>If <code>f</code> is passed in it will be applied to the target geometries.</p>`,3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[716]||(s[716]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/other_primitives.jl#L45-L54",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",me,[i("summary",null,[s[718]||(s[718]=i("a",{id:"GeometryOpsCore.manifold",href:"#GeometryOpsCore.manifold"},[i("span",{class:"jlbinding"},"GeometryOpsCore.manifold")],-1)),s[719]||(s[719]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[721]||(s[721]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">manifold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Manifold</span></span></code></pre></div><p>Return the manifold associated with the algorithm.</p><p>May be any subtype of <a href="/GeometryOps.jl/previews/PR339/api#GeometryOpsCore.Manifold"><code>Manifold</code></a>.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[720]||(s[720]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/types/algorithm.jl#L83-L89",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Te,[i("summary",null,[s[722]||(s[722]=i("a",{id:"GeometryOpsCore.rebuild-Tuple{Any, Any}",href:"#GeometryOpsCore.rebuild-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOpsCore.rebuild")],-1)),s[723]||(s[723]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[725]||(s[725]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rebuild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, child_geoms)</span></span></code></pre></div><p>Rebuild a geometry from child geometries.</p><p>By default geometries will be rebuilt as a <code>GeoInterface.Wrappers</code> geometry, but <code>rebuild</code> can have methods added to it to dispatch on geometries from other packages and specify how to rebuild them.</p><p>(Maybe it should go into GeoInterface.jl)</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[724]||(s[724]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/other_primitives.jl#L148-L158",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Ce,[i("summary",null,[s[726]||(s[726]=i("a",{id:"GeometryOpsCore.reconstruct-Tuple{Any, Any}",href:"#GeometryOpsCore.reconstruct-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"GeometryOpsCore.reconstruct")],-1)),s[727]||(s[727]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[729]||(s[729]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reconstruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom, components)</span></span></code></pre></div><p>Reconstruct <code>geom</code> from an iterable of component objects that match its structure.</p><p>All objects in <code>components</code> must have the same <code>GeoInterface.trait</code>.</p><p>Usually used in combination with <code>flatten</code>.</p>',4)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[728]||(s[728]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/other_primitives.jl#L89-L97",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",fe,[i("summary",null,[s[730]||(s[730]=i("a",{id:"GeometryOpsCore.reconstruct_table-Tuple{Any, Any, Any, Any, Vararg{Any}}",href:"#GeometryOpsCore.reconstruct_table-Tuple{Any, Any, Any, Any, Vararg{Any}}"},[i("span",{class:"jlbinding"},"GeometryOpsCore.reconstruct_table")],-1)),s[731]||(s[731]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[733]||(s[733]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reconstruct_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, geometry_column_names, geometry_columns, other_column_names, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reconstruct a table from the given input, geometry column names, geometry columns, and other column names.</p><p>Any function that defines <code>reconstruct_table</code> must also define <code>used_reconstruct_table_kwargs</code>.</p><p>The input must be a table.</p><p>The function should return a best-effort attempt at a table of the same type as the input, with the new geometry column(s) and other columns.</p><p>The fallback implementation invokes <code>Tables.materializer</code>. But if you want to be efficient and pass e.g. arbitrary kwargs to the materializer, or materialize in a different way, you can do so by overloading this function for your desired input type.</p><p>This is &quot;semi-public&quot; API and while it may add optional arguments, it will not add new required positional arguments. All implementations must allow arbitrary kwargs to pass through and harvest what they need.</p>',7)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[732]||(s[732]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/apply.jl#L263-L283",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",Fe,[i("summary",null,[s[734]||(s[734]=i("a",{id:"GeometryOpsCore.unwrap",href:"#GeometryOpsCore.unwrap"},[i("span",{class:"jlbinding"},"GeometryOpsCore.unwrap")],-1)),s[735]||(s[735]=l()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[737]||(s[737]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:AbstractTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unwrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:AbstractTrait}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj)</span></span></code></pre></div><p>Unwrap the object to vectors, down to the target trait.</p><p>If <code>f</code> is passed in it will be applied to the target geometries as they are found.</p>`,3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[736]||(s[736]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/other_primitives.jl#L13-L21",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",be,[i("summary",null,[s[738]||(s[738]=i("a",{id:"GeometryOpsCore.used_reconstruct_table_kwargs-Tuple{Any}",href:"#GeometryOpsCore.used_reconstruct_table_kwargs-Tuple{Any}"},[i("span",{class:"jlbinding"},"GeometryOpsCore.used_reconstruct_table_kwargs")],-1)),s[739]||(s[739]=l()),a(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[741]||(s[741]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">used_reconstruct_table_kwargs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span></code></pre></div><p>Return a tuple of the kwargs that should be passed to <code>reconstruct_table</code> for the given input.</p><p>This is &quot;semi-public&quot; API, and required for any input type that defines <code>reconstruct_table</code>.</p>',3)),a(e,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[740]||(s[740]=[i("a",{href:"https://github.com/JuliaGeo/GeometryOps.jl/blob/f54cbe205acdc9867f7366c3c452da432c5de468/GeometryOpsCore/src/apply.jl#L252-L258",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[748]||(s[748]=t('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>K. Hormann and N. Sukumar. Generalized Barycentric Coordinates in Computer Graphics and Computational Mechanics. Taylor &amp; Fancis, CRC Press, 2017. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',2))])}const xe=h(k,[["render",Ae]]);export{De as __pageData,xe as default};
