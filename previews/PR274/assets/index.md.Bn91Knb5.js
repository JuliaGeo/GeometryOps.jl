import{_ as t,c as a,o,az as i}from"./chunks/framework.Dgre8KCP.js";const m=JSON.parse('{"title":"What is GeometryOps.jl?","description":"","frontmatter":{"layout":"home","hero":{"name":"GeometryOps.jl","text":"","tagline":"Blazing fast geometry operations in pure Julia","image":{"src":"/logo.png","alt":"GeometryOps"},"actions":[{"theme":"brand","text":"Introduction","link":"/introduction"},{"theme":"alt","text":"View on Github","link":"https://github.com/JuliaGeo/GeometryOps.jl"},{"theme":"alt","text":"API Reference","link":"/api"}]},"features":[{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://rawcdn.githack.com/JuliaLang/julia-logo-graphics/f3a09eb033b653970c5b8412e7755e3c7d78db9e/images/juliadots.iconset/icon_512x512.png\\" alt=\\"Julia code\\"/>","title":"Pure Julia code","details":"Fast, understandable, extensible functions","link":"/introduction"},{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://fredrikekre.github.io/Literate.jl/v2/assets/logo.png\\" />","title":"Literate programming","details":"Documented source code with examples!","link":"/source/methods/clipping/cut"},{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://rawcdn.githack.com/JuliaGeo/juliageo.github.io/4788480c2a5f7ae36df67a4b142e3a963024ac91/img/juliageo.svg\\" />","title":"Full integration with GeoInterface","details":"Use any GeoInterface.jl-compatible geometry","link":"https://juliageo.org/GeoInterface.jl/stable"}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),n={name:"index.md"};function s(r,e,l,c,d,h){return o(),a("div",null,[...e[0]||(e[0]=[i('<p style="margin-bottom:2cm;"></p><div class="vp-doc" style="width:80%;margin:auto;"><h1 id="what-is-geometryops-jl" tabindex="-1">What is GeometryOps.jl? <a class="header-anchor" href="#what-is-geometryops-jl" aria-label="Permalink to &quot;What is GeometryOps.jl?&quot;">​</a></h1><p>GeometryOps.jl is a package for geometric calculations on (primarily 2D) geometries.</p><p>The driving idea behind this package is to unify all the disparate packages for geometric calculations in Julia, and make them <a href="https://github.com/JuliaGeo/GeoInterface.jl" target="_blank" rel="noreferrer">GeoInterface.jl</a>-compatible. We seem to be focusing primarily on 2/2.5D geometries for now.</p><p>Most of the usecases are driven by GIS and similar Earth data workflows, so this might be a bit specialized towards that, but methods should always be general to any coordinate space.</p><p>We welcome contributions, either as pull requests or discussion on issues!</p><h1 id="how-to-navigate-the-docs" tabindex="-1">How to navigate the docs <a class="header-anchor" href="#how-to-navigate-the-docs" aria-label="Permalink to &quot;How to navigate the docs&quot;">​</a></h1><p>GeometryOps&#39; <a href="https://juliageo.org/GeometryOps.jl/stable" target="_blank" rel="noreferrer">docs</a> are divided into three main sections: tutorials, explanations and source code.<br> Documentation and examples for many functions can be found in the source code section, since we use literate programming in GeometryOps.</p><ul><li>Tutorials are meant to teach the fundamental concepts behind GeometryOps, and how to perform certain operations.</li><li>Explanations usually contain little code, and explain in more detail how GeometryOps works.</li><li>Source code usually contains explanations and examples at the top of the page, followed by annotated source code from that file.</li></ul></div>',2)])])}const u=t(n,[["render",s]]);export{m as __pageData,u as default};
