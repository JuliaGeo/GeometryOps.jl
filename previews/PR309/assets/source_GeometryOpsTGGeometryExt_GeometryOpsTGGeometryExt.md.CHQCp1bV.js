import{_ as i,c as e,o as a,az as t}from"./chunks/framework.DWyTVl7I.js";const c=JSON.parse('{"title":"TGGeometry extension","description":"","frontmatter":{},"headers":[],"relativePath":"source/GeometryOpsTGGeometryExt/GeometryOpsTGGeometryExt.md","filePath":"source/GeometryOpsTGGeometryExt/GeometryOpsTGGeometryExt.md","lastUpdated":null}'),n={name:"source/GeometryOpsTGGeometryExt/GeometryOpsTGGeometryExt.md"};function p(l,s,h,r,o,k){return a(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="TGGeometry-extension" tabindex="-1">TGGeometry extension <a class="header-anchor" href="#TGGeometry-extension" aria-label="Permalink to &quot;TGGeometry extension {#TGGeometry-extension}&quot;">â€‹</a></h1><p><a href="https://github.com/JuliaGeometry/TGGeometry.jl" target="_blank" rel="noreferrer">TGGeometry.jl</a> is a Julia wrapper around the C library <a href="https://github.com/tidwall/tg" target="_blank" rel="noreferrer"><code>libtg</code></a>. which has an innovative acceleration scheme for 2-D spatial predicates (intersects, contains, etc.)</p><p>This extension provides a GeometryOps interface to that using GeometryOps&#39; <code>TG</code> algorithm.</p><p>You can use any predicate like so:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), geom1, geom2)</span></span></code></pre></div><p>or any other predicate in the list:</p><p><code>equals</code>, <code>intersects</code>, <code>disjoint</code>, <code>contains</code>, <code>within</code>, <code>covers</code>, <code>coveredby</code>, <code>touches</code></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOpsTGGeometryExt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TG</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeometryOps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TGGeometry</span></span></code></pre></div><p>Literally loop over every name in TG_PREDICATES and eval in a function implementation. This is short and sweet, and completely static, so it doesn&#39;t run at runtime but rather at compile time.</p><p>TODO: this could use some precompile statements, maybe.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jl_fname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TGGeometry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TG_PREDICATES</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jl_fname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geom1, geom2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TGGeometry.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">jl_fname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geom1, geom2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,13)])])}const y=i(n,[["render",p]]);export{c as __pageData,y as default};
