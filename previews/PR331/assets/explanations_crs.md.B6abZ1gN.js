import{_ as a,c as t,o,az as r}from"./chunks/framework.Dt5KiL3i.js";const m=JSON.parse('{"title":"Coordinate Reference Systems","description":"","frontmatter":{},"headers":[],"relativePath":"explanations/crs.md","filePath":"explanations/crs.md","lastUpdated":null}'),s={name:"explanations/crs.md"};function i(n,e,c,d,l,p){return o(),t("div",null,[...e[0]||(e[0]=[r('<h1 id="Coordinate-Reference-Systems" tabindex="-1">Coordinate Reference Systems <a class="header-anchor" href="#Coordinate-Reference-Systems" aria-label="Permalink to &quot;Coordinate Reference Systems {#Coordinate-Reference-Systems}&quot;">​</a></h1><p><a href="https://en.wikipedia.com/wiki/Spatial_reference_system" target="_blank" rel="noreferrer">Coordinate Reference System</a>s are simply descriptions of what some set of coordinates really mean in reference to some standard.</p><p>In a mathematical sense, coordinate reference systems can be thought of defining a <em>space</em>, with associated transformations from and to latitude-longitude space (plate-carree, long-lat, WGS84) which is the default CRS we assume.</p><h2 id="Geographic-CRS" tabindex="-1">Geographic CRS <a class="header-anchor" href="#Geographic-CRS" aria-label="Permalink to &quot;Geographic CRS {#Geographic-CRS}&quot;">​</a></h2><p>If a CRS is <em>geographic</em>, that means that it refers to coordinates on a sphere. Such coordinates should ideally be handled using a spherical geometry library like Google&#39;s s2. GeometryOps does not currently handle spherical geometry computations except in special cases (e.g., <a href="/GeometryOps.jl/previews/PR331/api#GeometryOps.segmentize-Tuple{Any}"><code>segmentize</code></a> with the <a href="/GeometryOps.jl/previews/PR331/api#GeometryOpsCore.Geodesic"><code>Geodesic</code></a> manifold).</p><p>A non-geographic CRS is assumed to be in Cartesian space.</p><h2 id="Projected-CRS" tabindex="-1">Projected CRS <a class="header-anchor" href="#Projected-CRS" aria-label="Permalink to &quot;Projected CRS {#Projected-CRS}&quot;">​</a></h2><p>Projected CRS are generally treated as Cartesian.</p><h2 id="Ways-to-describe-CRS" tabindex="-1">Ways to describe CRS <a class="header-anchor" href="#Ways-to-describe-CRS" aria-label="Permalink to &quot;Ways to describe CRS {#Ways-to-describe-CRS}&quot;">​</a></h2><p>Completely separate from the <em>meaning</em> of the CRS is the way you describe or define it. There are a <a href="/GeometryOps.jl/previews/PR331/explanations/crs#crs-format-table">dizzying array of ways</a> to do this, but two easy ones are Proj strings and Well Known Text.</p><p>The geographic community seems to be standardizing on <a href="./crs">Well Known Text</a> as the &quot;best&quot; CRS identifier. This is quite verbose, but is unambiguous and easy enough to read once you get the hang of it.</p><p>To indicate the type of CRS definition you&#39;re using, you can wrap a string in its corresponding <code>GeoFormatTypes</code> type.</p><h2 id="crs-format-table" tabindex="-1">CRS format table <a class="header-anchor" href="#crs-format-table" aria-label="Permalink to &quot;CRS format table {#crs-format-table}&quot;">​</a></h2><p>&lt;!– TODO: convert this to a Markdown table–&gt;</p><ul><li><p>Proj-strings: a brief but powerful way to describe a set of known CRS + some transformations to them. Really useful when plotting and interactively adjusting CRS. See the Proj docs.</p></li><li><p>EPSG codes: a short way to refer to a known coordinate system in the database of the European Petroleum Survey Group. Example: <code>EPSG:4236</code>.</p></li><li><p>ESRI codes: similar to EPSG codes, but referring to CRS known to ESRI instead. Example: <code>ESRI:12345</code></p></li><li><p>ProjJSON: a more structured way to express Proj-strings using JSON.</p></li><li><p>KML: key-markup language, an XML extension, used in web feature services</p></li><li><p>Mapinfo CoordSys:</p></li></ul>',15)])])}const f=a(s,[["render",i]]);export{m as __pageData,f as default};
