import{_ as i,c as a,o as n,az as e}from"./chunks/framework.Dt5KiL3i.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"source/utils/SpatialTreeInterface/dual_depth_first_search.md","filePath":"source/utils/SpatialTreeInterface/dual_depth_first_search.md","lastUpdated":null}'),t={name:"source/utils/SpatialTreeInterface/dual_depth_first_search.md"};function l(h,s,p,k,d,r){return n(),a("div",null,[...s[0]||(s[0]=[e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    dual_depth_first_search(f, predicate, tree1, tree2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Executes a dual depth-first search over two trees, descending into the children of</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nodes \`i\` and \`j\` when \`predicate(node_extent(i), node_extent(j))\` is true,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">and pruning that branch when \`predicate(node_extent(i), node_extent(j))\` is false.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Finally, calls \`f(i1, i2)\` for each leaf-level index \`i1::Int\` in \`tree1\` and \`i2::Int\` in \`tree2\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">that satisfies \`predicate(extent(i1), extent(i2))\`.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Here, \`f(i1::Int, i2::Int)\` may be any function that takes two integers as arguments.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">It may optionally return an \`Action\` to alter the control</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">flow of the \`Action(:full_return, true)\` to return \`Action(:full_return, true)\` from this</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">function and break out of the recursion.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">This is generic to anything that implements the SpatialTreeInterface, particularly the methods</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`isleaf\`, \`getchild\`, and \`child_indices_extents\`.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"># Examples</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`julia</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">using NaturalEarth,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dual_depth_first_search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, predicate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">N1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">N2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {F, P, N1, N2}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isleaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isleaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node2)</span></span></code></pre></div><p>both nodes are leaves, so we can just iterate over the indices and extents</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i1, extent1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> child_indices_extents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i2, extent2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> child_indices_extents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> predicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(extent1, extent2)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    @controlflow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i1, i2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elseif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isleaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node1) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># node2 is not a leaf, node1 is - recurse further into node2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getchild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> predicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">node_extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node1), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">node_extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                @controlflow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dual_depth_first_search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, predicate, node1, child)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elseif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isleaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node2) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># node1 is not a leaf, node2 is - recurse further into node1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getchild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> predicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">node_extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">node_extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node2))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                @controlflow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dual_depth_first_search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, predicate, child, node2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # neither node is a leaf, recurse into both children</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> child1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getchild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node1)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> child2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getchild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> predicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">node_extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child1), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">node_extent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child2))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    @controlflow</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dual_depth_first_search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, predicate, child1, child2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,5)])])}const F=i(t,[["render",l]]);export{c as __pageData,F as default};
